#!/bin/bash

# üîí GMC Ecosystem - Security Automation Scripts
# Scripts automatizados para valida√ß√µes de seguran√ßa DevSecOps
# Baseado em OWASP Top 10 Smart Contracts e melhores pr√°ticas

set -euo pipefail

# =============================================================================
# CONFIGURA√á√ïES GLOBAIS
# =============================================================================

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configura√ß√µes
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"
LOG_DIR="$PROJECT_ROOT/logs/security"
REPORT_DIR="$PROJECT_ROOT/reports/security"
CONFIG_DIR="$PROJECT_ROOT/devsecops/config"

# Criar diret√≥rios necess√°rios
mkdir -p "$LOG_DIR" "$REPORT_DIR"

# Timestamp para logs
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_FILE="$LOG_DIR/security_scan_$TIMESTAMP.log"

# =============================================================================
# FUN√á√ïES UTILIT√ÅRIAS
# =============================================================================

# Fun√ß√£o de logging
log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case $level in
        "INFO")
            echo -e "${BLUE}[$timestamp] [INFO]${NC} $message" | tee -a "$LOG_FILE"
            ;;
        "WARN")
            echo -e "${YELLOW}[$timestamp] [WARN]${NC} $message" | tee -a "$LOG_FILE"
            ;;
        "ERROR")
            echo -e "${RED}[$timestamp] [ERROR]${NC} $message" | tee -a "$LOG_FILE"
            ;;
        "SUCCESS")
            echo -e "${GREEN}[$timestamp] [SUCCESS]${NC} $message" | tee -a "$LOG_FILE"
            ;;
        "DEBUG")
            if [[ "${DEBUG:-false}" == "true" ]]; then
                echo -e "${PURPLE}[$timestamp] [DEBUG]${NC} $message" | tee -a "$LOG_FILE"
            fi
            ;;
    esac
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    log "INFO" "Verificando depend√™ncias..."
    
    local deps=("cargo" "anchor" "jq" "curl" "git" "rustc")
    local missing_deps=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing_deps+=("$dep")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log "ERROR" "Depend√™ncias faltando: ${missing_deps[*]}"
        log "INFO" "Instale as depend√™ncias faltando e tente novamente."
        exit 1
    fi
    
    log "SUCCESS" "Todas as depend√™ncias est√£o instaladas."
}

# Fun√ß√£o para verificar se estamos no diret√≥rio correto
check_project_structure() {
    log "INFO" "Verificando estrutura do projeto..."
    
    local required_files=("Cargo.toml" "Anchor.toml" "programs")
    
    for file in "${required_files[@]}"; do
        if [[ ! -e "$PROJECT_ROOT/$file" ]]; then
            log "ERROR" "Arquivo/diret√≥rio obrigat√≥rio n√£o encontrado: $file"
            log "ERROR" "Execute este script a partir do diret√≥rio raiz do projeto GMC."
            exit 1
        fi
    done
    
    log "SUCCESS" "Estrutura do projeto verificada."
}

# Fun√ß√£o para gerar relat√≥rio JSON
generate_json_report() {
    local report_type=$1
    local results=$2
    local output_file="$REPORT_DIR/${report_type}_report_$TIMESTAMP.json"
    
    cat > "$output_file" << EOF
{
  "report_type": "$report_type",
  "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "project": "GMC Ecosystem",
  "version": "1.0",
  "results": $results
}
EOF
    
    log "INFO" "Relat√≥rio JSON gerado: $output_file"
    echo "$output_file"
}

# =============================================================================
# OWASP TOP 10 SMART CONTRACTS - VERIFICA√á√ïES
# =============================================================================

# SC01 - Reentrancy Protection
check_reentrancy() {
    log "INFO" "üîç SC01 - Verificando prote√ß√£o contra reentr√¢ncia..."
    
    local findings=()
    local severity="medium"
    
    # Verificar uso de ReentrancyGuard ou padr√µes similares
    if grep -r "ReentrancyGuard\|nonReentrant\|reentrancy_guard" "$PROJECT_ROOT/programs" --include="*.rs" > /dev/null; then
        log "SUCCESS" "Prote√ß√£o contra reentr√¢ncia encontrada."
        findings+=('{"type": "protection_found", "message": "ReentrancyGuard ou similar implementado"}')
    else
        log "WARN" "Nenhuma prote√ß√£o expl√≠cita contra reentr√¢ncia encontrada."
        findings+=('{"type": "missing_protection", "message": "Considere implementar prote√ß√£o contra reentr√¢ncia"}')
        severity="high"
    fi
    
    # Verificar padr√£o Checks-Effects-Interactions
    local cei_violations=$(grep -r "transfer\|send" "$PROJECT_ROOT/programs" --include="*.rs" -A 5 -B 5 | grep -c "state_change_after_external_call" || true)
    
    if [[ $cei_violations -gt 0 ]]; then
        log "WARN" "Poss√≠veis viola√ß√µes do padr√£o Checks-Effects-Interactions encontradas: $cei_violations"
        findings+=('{"type": "cei_violation", "count": '$cei_violations', "message": "Verificar ordem de opera√ß√µes"}')
        severity="high"
    fi
    
    local result=$(printf '%s\n' "${findings[@]}" | jq -s '.')
    echo '{"check": "reentrancy", "severity": "'$severity'", "findings": '$result'}'
}

# SC02 - Integer Overflow/Underflow
check_integer_overflow() {
    log "INFO" "üîç SC02 - Verificando prote√ß√£o contra overflow/underflow..."
    
    local findings=()
    local severity="low"
    
    # Verificar uso de opera√ß√µes seguras
    local safe_math_usage=$(grep -r "checked_add\|checked_sub\|checked_mul\|checked_div" "$PROJECT_ROOT/programs" --include="*.rs" | wc -l)
    local unsafe_math_usage=$(grep -r "\+\|\-\|\*\|/" "$PROJECT_ROOT/programs" --include="*.rs" | grep -v "checked_" | wc -l)
    
    if [[ $safe_math_usage -gt 0 ]]; then
        log "SUCCESS" "Opera√ß√µes matem√°ticas seguras encontradas: $safe_math_usage"
        findings+=('{"type": "safe_math_found", "count": '$safe_math_usage'}')
    fi
    
    if [[ $unsafe_math_usage -gt 10 ]]; then  # Threshold arbitr√°rio
        log "WARN" "Muitas opera√ß√µes matem√°ticas potencialmente inseguras: $unsafe_math_usage"
        findings+=('{"type": "unsafe_math_warning", "count": '$unsafe_math_usage'}')
        severity="medium"
    fi
    
    # Verificar valida√ß√£o de entrada
    local input_validation=$(grep -r "require\|assert\|ensure" "$PROJECT_ROOT/programs" --include="*.rs" | wc -l)
    
    if [[ $input_validation -gt 0 ]]; then
        log "SUCCESS" "Valida√ß√µes de entrada encontradas: $input_validation"
        findings+=('{"type": "input_validation_found", "count": '$input_validation'}')
    else
        log "WARN" "Poucas valida√ß√µes de entrada encontradas."
        findings+=('{"type": "insufficient_validation", "message": "Considere adicionar mais valida√ß√µes"}')
        severity="medium"
    fi
    
    local result=$(printf '%s\n' "${findings[@]}" | jq -s '.')
    echo '{"check": "integer_overflow", "severity": "'$severity'", "findings": '$result'}'
}

# SC03 - Timestamp Dependence
check_timestamp_dependence() {
    log "INFO" "üîç SC03 - Verificando depend√™ncia de timestamp..."
    
    local findings=()
    local severity="low"
    
    # Verificar uso de Clock::get()
    local clock_usage=$(grep -r "Clock::get\|clock.unix_timestamp" "$PROJECT_ROOT/programs" --include="*.rs" | wc -l)
    
    if [[ $clock_usage -gt 0 ]]; then
        log "INFO" "Uso de timestamp encontrado: $clock_usage ocorr√™ncias"
        findings+=('{"type": "timestamp_usage", "count": '$clock_usage'}')
        
        # Verificar se h√° valida√ß√£o de toler√¢ncia
        local tolerance_checks=$(grep -r "tolerance\|window\|range" "$PROJECT_ROOT/programs" --include="*.rs" -A 3 -B 3 | grep -c "timestamp" || true)
        
        if [[ $tolerance_checks -gt 0 ]]; then
            log "SUCCESS" "Verifica√ß√µes de toler√¢ncia de tempo encontradas."
            findings+=('{"type": "tolerance_found", "count": '$tolerance_checks'}')
        else
            log "WARN" "Uso de timestamp sem verifica√ß√£o de toler√¢ncia."
            findings+=('{"type": "no_tolerance", "message": "Considere implementar janelas de toler√¢ncia"}')
            severity="medium"
        fi
    fi
    
    local result=$(printf '%s\n' "${findings[@]}" | jq -s '.')
    echo '{"check": "timestamp_dependence", "severity": "'$severity'", "findings": '$result'}'
}

# SC04 - Authorization
check_authorization() {
    log "INFO" "üîç SC04 - Verificando controles de autoriza√ß√£o..."
    
    local findings=()
    local severity="low"
    
    # Verificar uso de Signer
    local signer_usage=$(grep -r "Signer\|has_one\|constraint" "$PROJECT_ROOT/programs" --include="*.rs" | wc -l)
    
    if [[ $signer_usage -gt 0 ]]; then
        log "SUCCESS" "Verifica√ß√µes de assinatura encontradas: $signer_usage"
        findings+=('{"type": "signer_checks_found", "count": '$signer_usage'}')
    else
        log "ERROR" "Nenhuma verifica√ß√£o de assinatura encontrada!"
        findings+=('{"type": "no_signer_checks", "message": "Implementar verifica√ß√µes de autoriza√ß√£o"}')
        severity="critical"
    fi
    
    # Verificar controles de acesso baseados em papel
    local rbac_usage=$(grep -r "admin\|owner\|authority\|role" "$PROJECT_ROOT/programs" --include="*.rs" | wc -l)
    
    if [[ $rbac_usage -gt 0 ]]; then
        log "SUCCESS" "Controles de acesso baseados em papel encontrados: $rbac_usage"
        findings+=('{"type": "rbac_found", "count": '$rbac_usage'}')
    fi
    
    # Verificar fun√ß√µes p√∫blicas sem prote√ß√£o
    local public_functions=$(grep -r "pub fn" "$PROJECT_ROOT/programs" --include="*.rs" | wc -l)
    local protected_functions=$(grep -r "pub fn" "$PROJECT_ROOT/programs" --include="*.rs" -A 10 | grep -c "Signer\|constraint" || true)
    
    local unprotected_ratio=$((public_functions - protected_functions))
    
    if [[ $unprotected_ratio -gt 5 ]]; then  # Threshold arbitr√°rio
        log "WARN" "Muitas fun√ß√µes p√∫blicas potencialmente desprotegidas: $unprotected_ratio"
        findings+=('{"type": "unprotected_functions", "count": '$unprotected_ratio'}')
        severity="high"
    fi
    
    local result=$(printf '%s\n' "${findings[@]}" | jq -s '.')
    echo '{"check": "authorization", "severity": "'$severity'", "findings": '$result'}'
}

# SC05 - Unprotected Token Withdrawal
check_unprotected_withdrawal() {
    log "INFO" "üîç SC05 - Verificando prote√ß√£o de retiradas..."
    
    local findings=()
    local severity="low"
    
    # Verificar fun√ß√µes de transfer√™ncia/retirada
    local transfer_functions=$(grep -r "transfer\|withdraw\|claim" "$PROJECT_ROOT/programs" --include="*.rs" | wc -l)
    
    if [[ $transfer_functions -gt 0 ]]; then
        log "INFO" "Fun√ß√µes de transfer√™ncia encontradas: $transfer_functions"
        findings+=('{"type": "transfer_functions_found", "count": '$transfer_functions'}')
        
        # Verificar valida√ß√µes de saldo
        local balance_checks=$(grep -r "balance\|amount" "$PROJECT_ROOT/programs" --include="*.rs" -A 5 -B 5 | grep -c "require\|assert\|ensure" || true)
        
        if [[ $balance_checks -gt 0 ]]; then
            log "SUCCESS" "Verifica√ß√µes de saldo encontradas: $balance_checks"
            findings+=('{"type": "balance_checks_found", "count": '$balance_checks'}')
        else
            log "WARN" "Poucas verifica√ß√µes de saldo encontradas."
            findings+=('{"type": "insufficient_balance_checks", "message": "Implementar verifica√ß√µes de saldo"}')
            severity="high"
        fi
        
        # Verificar limites de retirada
        local withdrawal_limits=$(grep -r "limit\|max_amount\|daily_limit" "$PROJECT_ROOT/programs" --include="*.rs" | wc -l)
        
        if [[ $withdrawal_limits -gt 0 ]]; then
            log "SUCCESS" "Limites de retirada encontrados: $withdrawal_limits"
            findings+=('{"type": "withdrawal_limits_found", "count": '$withdrawal_limits'}')
        else
            log "WARN" "Nenhum limite de retirada encontrado."
            findings+=('{"type": "no_withdrawal_limits", "message": "Considere implementar limites"}')
            severity="medium"
        fi
    fi
    
    local result=$(printf '%s\n' "${findings[@]}" | jq -s '.')
    echo '{"check": "unprotected_withdrawal", "severity": "'$severity'", "findings": '$result'}'
}

# SC06 - Selfdestruct
check_selfdestruct() {
    log "INFO" "üîç SC06 - Verificando prote√ß√£o contra destrui√ß√£o..."
    
    local findings=()
    local severity="low"
    
    # Verificar fun√ß√µes de fechamento de conta
    local close_functions=$(grep -r "close\|destroy\|selfdestruct" "$PROJECT_ROOT/programs" --include="*.rs" | wc -l)
    
    if [[ $close_functions -gt 0 ]]; then
        log "INFO" "Fun√ß√µes de fechamento encontradas: $close_functions"
        findings+=('{"type": "close_functions_found", "count": '$close_functions'}')
        
        # Verificar prote√ß√µes de admin
        local admin_protection=$(grep -r "close\|destroy" "$PROJECT_ROOT/programs" --include="*.rs" -A 5 -B 5 | grep -c "admin\|owner\|authority" || true)
        
        if [[ $admin_protection -gt 0 ]]; then
            log "SUCCESS" "Prote√ß√µes de administrador encontradas: $admin_protection"
            findings+=('{"type": "admin_protection_found", "count": '$admin_protection'}')
        else
            log "WARN" "Fun√ß√µes de fechamento sem prote√ß√£o de administrador."
            findings+=('{"type": "no_admin_protection", "message": "Proteger fun√ß√µes de fechamento"}')
            severity="high"
        fi
    fi
    
    local result=$(printf '%s\n' "${findings[@]}" | jq -s '.')
    echo '{"check": "selfdestruct", "severity": "'$severity'", "findings": '$result'}'
}

# SC07 - Floating Pragma
check_floating_pragma() {
    log "INFO" "üîç SC07 - Verificando vers√µes fixas de depend√™ncias..."
    
    local findings=()
    local severity="low"
    
    # Verificar Cargo.toml para vers√µes fixas
    if [[ -f "$PROJECT_ROOT/Cargo.toml" ]]; then
        local floating_versions=$(grep -E '"\^|"~|">=|">' "$PROJECT_ROOT/Cargo.toml" | wc -l)
        local fixed_versions=$(grep -E '"[0-9]+\.[0-9]+\.[0-9]+"' "$PROJECT_ROOT/Cargo.toml" | wc -l)
        
        if [[ $floating_versions -gt 0 ]]; then
            log "WARN" "Vers√µes flutuantes encontradas: $floating_versions"
            findings+=('{"type": "floating_versions_found", "count": '$floating_versions'}')
            severity="medium"
        fi
        
        if [[ $fixed_versions -gt 0 ]]; then
            log "SUCCESS" "Vers√µes fixas encontradas: $fixed_versions"
            findings+=('{"type": "fixed_versions_found", "count": '$fixed_versions'}')
        fi
    fi
    
    # Verificar Cargo.lock
    if [[ -f "$PROJECT_ROOT/Cargo.lock" ]]; then
        log "SUCCESS" "Cargo.lock encontrado - depend√™ncias travadas."
        findings+=('{"type": "cargo_lock_found", "message": "Depend√™ncias travadas"}')
    else
        log "WARN" "Cargo.lock n√£o encontrado."
        findings+=('{"type": "no_cargo_lock", "message": "Gerar Cargo.lock"}')
        severity="medium"
    fi
    
    local result=$(printf '%s\n' "${findings[@]}" | jq -s '.')
    echo '{"check": "floating_pragma", "severity": "'$severity'", "findings": '$result'}'
}

# SC08 - Function Visibility
check_function_visibility() {
    log "INFO" "üîç SC08 - Verificando visibilidade de fun√ß√µes..."
    
    local findings=()
    local severity="low"
    
    # Verificar fun√ß√µes p√∫blicas
    local public_functions=$(grep -r "pub fn" "$PROJECT_ROOT/programs" --include="*.rs" | wc -l)
    local private_functions=$(grep -r "fn " "$PROJECT_ROOT/programs" --include="*.rs" | grep -v "pub fn" | wc -l)
    
    log "INFO" "Fun√ß√µes p√∫blicas: $public_functions, Fun√ß√µes privadas: $private_functions"
    findings+=('{"type": "function_visibility", "public": '$public_functions', "private": '$private_functions'}')
    
    # Verificar se h√° muitas fun√ß√µes p√∫blicas
    if [[ $public_functions -gt $((private_functions * 2)) ]]; then
        log "WARN" "Muitas fun√ß√µes p√∫blicas em rela√ß√£o √†s privadas."
        findings+=('{"type": "too_many_public", "message": "Revisar necessidade de fun√ß√µes p√∫blicas"}')
        severity="medium"
    fi
    
    # Verificar fun√ß√µes sem documenta√ß√£o
    local undocumented_functions=$(grep -r "pub fn" "$PROJECT_ROOT/programs" --include="*.rs" -B 3 | grep -c "///" || true)
    local documented_ratio=$((undocumented_functions * 100 / public_functions))
    
    if [[ $documented_ratio -lt 80 ]]; then
        log "WARN" "Muitas fun√ß√µes p√∫blicas sem documenta√ß√£o: $documented_ratio%"
        findings+=('{"type": "undocumented_functions", "ratio": '$documented_ratio'}')
        severity="medium"
    fi
    
    local result=$(printf '%s\n' "${findings[@]}" | jq -s '.')
    echo '{"check": "function_visibility", "severity": "'$severity'", "findings": '$result'}'
}

# SC09 - Gas Limit DoS
check_gas_limit_dos() {
    log "INFO" "üîç SC09 - Verificando prote√ß√£o contra DoS por gas..."
    
    local findings=()
    local severity="low"
    
    # Verificar loops sem limite
    local unbounded_loops=$(grep -r "for \|while " "$PROJECT_ROOT/programs" --include="*.rs" | wc -l)
    local bounded_loops=$(grep -r "for \|while " "$PROJECT_ROOT/programs" --include="*.rs" -A 5 | grep -c "break\|return\|limit" || true)
    
    if [[ $unbounded_loops -gt 0 ]]; then
        log "INFO" "Loops encontrados: $unbounded_loops"
        findings+=('{"type": "loops_found", "count": '$unbounded_loops'}')
        
        local unbounded_ratio=$((unbounded_loops - bounded_loops))
        
        if [[ $unbounded_ratio -gt 2 ]]; then
            log "WARN" "Loops potencialmente sem limite: $unbounded_ratio"
            findings+=('{"type": "unbounded_loops", "count": '$unbounded_ratio'}')
            severity="medium"
        fi
    fi
    
    # Verificar opera√ß√µes custosas
    local expensive_ops=$(grep -r "sort\|search\|iterate" "$PROJECT_ROOT/programs" --include="*.rs" | wc -l)
    
    if [[ $expensive_ops -gt 0 ]]; then
        log "INFO" "Opera√ß√µes potencialmente custosas: $expensive_ops"
        findings+=('{"type": "expensive_operations", "count": '$expensive_ops'}')
        
        if [[ $expensive_ops -gt 5 ]]; then
            severity="medium"
        fi
    fi
    
    local result=$(printf '%s\n' "${findings[@]}" | jq -s '.')
    echo '{"check": "gas_limit_dos", "severity": "'$severity'", "findings": '$result'}'
}

# SC10 - Unhandled Exception
check_unhandled_exception() {
    log "INFO" "üîç SC10 - Verificando tratamento de exce√ß√µes..."
    
    local findings=()
    local severity="low"
    
    # Verificar uso de Result e Option
    local result_usage=$(grep -r "Result<\|Option<" "$PROJECT_ROOT/programs" --include="*.rs" | wc -l)
    local error_handling=$(grep -r "match\|if let\|unwrap_or\|map_err" "$PROJECT_ROOT/programs" --include="*.rs" | wc -l)
    
    if [[ $result_usage -gt 0 ]]; then
        log "SUCCESS" "Uso de Result/Option encontrado: $result_usage"
        findings+=('{"type": "result_option_usage", "count": '$result_usage'}')
    fi
    
    if [[ $error_handling -gt 0 ]]; then
        log "SUCCESS" "Tratamento de erro encontrado: $error_handling"
        findings+=('{"type": "error_handling_found", "count": '$error_handling'}')
    fi
    
    # Verificar uso perigoso de unwrap
    local unwrap_usage=$(grep -r "\.unwrap()" "$PROJECT_ROOT/programs" --include="*.rs" | wc -l)
    
    if [[ $unwrap_usage -gt 0 ]]; then
        log "WARN" "Uso de unwrap() encontrado: $unwrap_usage"
        findings+=('{"type": "unwrap_usage", "count": '$unwrap_usage', "message": "Considere usar expect() ou tratamento adequado"}')
        severity="medium"
    fi
    
    # Verificar defini√ß√£o de erros customizados
    local custom_errors=$(grep -r "#\[error\]\|Error\|ErrorCode" "$PROJECT_ROOT/programs" --include="*.rs" | wc -l)
    
    if [[ $custom_errors -gt 0 ]]; then
        log "SUCCESS" "Erros customizados encontrados: $custom_errors"
        findings+=('{"type": "custom_errors_found", "count": '$custom_errors'}')
    else
        log "WARN" "Poucos erros customizados encontrados."
        findings+=('{"type": "insufficient_custom_errors", "message": "Implementar erros customizados"}')
        severity="medium"
    fi
    
    local result=$(printf '%s\n' "${findings[@]}" | jq -s '.')
    echo '{"check": "unhandled_exception", "severity": "'$severity'", "findings": '$result'}'
}

# =============================================================================
# VERIFICA√á√ïES ADICIONAIS DE SEGURAN√áA
# =============================================================================

# Verifica√ß√£o de secrets no c√≥digo
check_secrets_in_code() {
    log "INFO" "üîç Verificando secrets no c√≥digo..."
    
    local findings=()
    local severity="low"
    
    # Padr√µes de secrets comuns
    local secret_patterns=(
        "private.*key"
        "secret.*key"
        "api.*key"
        "password"
        "token"
        "[0-9a-fA-F]{32,}"
        "[A-Za-z0-9+/]{40,}={0,2}"
    )
    
    for pattern in "${secret_patterns[@]}"; do
        local matches=$(grep -ri "$pattern" "$PROJECT_ROOT" --exclude-dir=.git --exclude-dir=target --exclude-dir=node_modules --exclude="*.log" | wc -l)
        
        if [[ $matches -gt 0 ]]; then
            log "WARN" "Poss√≠veis secrets encontrados para padr√£o '$pattern': $matches"
            findings+=('{"type": "potential_secret", "pattern": "'$pattern'", "count": '$matches'}')
            severity="high"
        fi
    done
    
    if [[ ${#findings[@]} -eq 0 ]]; then
        log "SUCCESS" "Nenhum secret √≥bvio encontrado no c√≥digo."
        findings+=('{"type": "no_secrets_found", "message": "Verifica√ß√£o passou"}')
    fi
    
    local result=$(printf '%s\n' "${findings[@]}" | jq -s '.')
    echo '{"check": "secrets_in_code", "severity": "'$severity'", "findings": '$result'}'
}

# Verifica√ß√£o de depend√™ncias vulner√°veis
check_vulnerable_dependencies() {
    log "INFO" "üîç Verificando depend√™ncias vulner√°veis..."
    
    local findings=()
    local severity="low"
    
    # Executar cargo audit se dispon√≠vel
    if command -v cargo-audit &> /dev/null; then
        local audit_output
        if audit_output=$(cargo audit --json 2>/dev/null); then
            local vulnerabilities=$(echo "$audit_output" | jq '.vulnerabilities.found | length' 2>/dev/null || echo "0")
            
            if [[ $vulnerabilities -gt 0 ]]; then
                log "WARN" "Vulnerabilidades encontradas: $vulnerabilities"
                findings+=('{"type": "vulnerabilities_found", "count": '$vulnerabilities'}')
                severity="high"
            else
                log "SUCCESS" "Nenhuma vulnerabilidade conhecida encontrada."
                findings+=('{"type": "no_vulnerabilities", "message": "Audit passou"}')
            fi
        else
            log "WARN" "Falha ao executar cargo audit."
            findings+=('{"type": "audit_failed", "message": "N√£o foi poss√≠vel executar audit"}')
            severity="medium"
        fi
    else
        log "WARN" "cargo-audit n√£o instalado."
        findings+=('{"type": "audit_not_available", "message": "Instalar cargo-audit"}')
        severity="medium"
    fi
    
    local result=$(printf '%s\n' "${findings[@]}" | jq -s '.')
    echo '{"check": "vulnerable_dependencies", "severity": "'$severity'", "findings": '$result'}'
}

# Verifica√ß√£o de configura√ß√£o de seguran√ßa
check_security_configuration() {
    log "INFO" "üîç Verificando configura√ß√£o de seguran√ßa..."
    
    local findings=()
    local severity="low"
    
    # Verificar arquivos de configura√ß√£o de seguran√ßa
    local security_configs=(
        "$CONFIG_DIR/security-policies.yaml"
        "$PROJECT_ROOT/.cargo-deny.toml"
        "$PROJECT_ROOT/.gitignore"
    )
    
    for config in "${security_configs[@]}"; do
        if [[ -f "$config" ]]; then
            log "SUCCESS" "Configura√ß√£o de seguran√ßa encontrada: $(basename "$config")"
            findings+=('{"type": "config_found", "file": "'$(basename "$config")'"}')  
        else
            log "WARN" "Configura√ß√£o de seguran√ßa faltando: $(basename "$config")"
            findings+=('{"type": "config_missing", "file": "'$(basename "$config")'"}')  
            severity="medium"
        fi
    done
    
    # Verificar .gitignore para secrets
    if [[ -f "$PROJECT_ROOT/.gitignore" ]]; then
        local gitignore_patterns=("*.key" "*.pem" ".env" "secrets/")
        local protected_patterns=0
        
        for pattern in "${gitignore_patterns[@]}"; do
            if grep -q "$pattern" "$PROJECT_ROOT/.gitignore"; then
                ((protected_patterns++))
            fi
        done
        
        if [[ $protected_patterns -ge 3 ]]; then
            log "SUCCESS" "Padr√µes de prote√ß√£o adequados no .gitignore: $protected_patterns"
            findings+=('{"type": "gitignore_protection", "count": '$protected_patterns'}')
        else
            log "WARN" "Poucos padr√µes de prote√ß√£o no .gitignore: $protected_patterns"
            findings+=('{"type": "insufficient_gitignore", "count": '$protected_patterns'}')
            severity="medium"
        fi
    fi
    
    local result=$(printf '%s\n' "${findings[@]}" | jq -s '.')
    echo '{"check": "security_configuration", "severity": "'$severity'", "findings": '$result'}'
}

# =============================================================================
# FUN√á√ÉO PRINCIPAL DE EXECU√á√ÉO
# =============================================================================

# Executar todas as verifica√ß√µes OWASP
run_owasp_checks() {
    log "INFO" "üöÄ Iniciando verifica√ß√µes OWASP Top 10 Smart Contracts..."
    
    local all_results=()
    
    # Executar todas as verifica√ß√µes
    all_results+=("$(check_reentrancy)")
    all_results+=("$(check_integer_overflow)")
    all_results+=("$(check_timestamp_dependence)")
    all_results+=("$(check_authorization)")
    all_results+=("$(check_unprotected_withdrawal)")
    all_results+=("$(check_selfdestruct)")
    all_results+=("$(check_floating_pragma)")
    all_results+=("$(check_function_visibility)")
    all_results+=("$(check_gas_limit_dos)")
    all_results+=("$(check_unhandled_exception)")
    
    # Verifica√ß√µes adicionais
    all_results+=("$(check_secrets_in_code)")
    all_results+=("$(check_vulnerable_dependencies)")
    all_results+=("$(check_security_configuration)")
    
    # Gerar relat√≥rio consolidado
    local consolidated_results=$(printf '%s\n' "${all_results[@]}" | jq -s '.')
    local report_file=$(generate_json_report "owasp_security_scan" "$consolidated_results")
    
    # Calcular score de seguran√ßa
    local critical_count=$(echo "$consolidated_results" | jq '[.[] | select(.severity == "critical")] | length')
    local high_count=$(echo "$consolidated_results" | jq '[.[] | select(.severity == "high")] | length')
    local medium_count=$(echo "$consolidated_results" | jq '[.[] | select(.severity == "medium")] | length')
    local low_count=$(echo "$consolidated_results" | jq '[.[] | select(.severity == "low")] | length')
    
    local security_score=$((100 - (critical_count * 25) - (high_count * 10) - (medium_count * 5) - (low_count * 1)))
    
    log "INFO" "üìä Resumo da Verifica√ß√£o de Seguran√ßa:"
    log "INFO" "   Cr√≠tico: $critical_count"
    log "INFO" "   Alto: $high_count"
    log "INFO" "   M√©dio: $medium_count"
    log "INFO" "   Baixo: $low_count"
    log "INFO" "   Score de Seguran√ßa: $security_score/100"
    
    if [[ $security_score -ge 85 ]]; then
        log "SUCCESS" "‚úÖ Score de seguran√ßa excelente!"
    elif [[ $security_score -ge 70 ]]; then
        log "WARN" "‚ö†Ô∏è  Score de seguran√ßa bom, mas pode melhorar."
    else
        log "ERROR" "‚ùå Score de seguran√ßa baixo - a√ß√£o necess√°ria!"
    fi
    
    log "INFO" "üìÑ Relat√≥rio completo: $report_file"
    
    return $((critical_count + high_count))
}

# Fun√ß√£o de ajuda
show_help() {
    cat << EOF
üîí GMC Security Automation Script

Uso: $0 [OP√á√ÉO]

Op√ß√µes:
  --owasp-check     Executar verifica√ß√µes OWASP Top 10 Smart Contracts
  --secrets-check   Verificar secrets no c√≥digo
  --deps-check      Verificar depend√™ncias vulner√°veis
  --config-check    Verificar configura√ß√£o de seguran√ßa
  --all-checks      Executar todas as verifica√ß√µes
  --help           Mostrar esta ajuda

Exemplos:
  $0 --owasp-check
  $0 --all-checks
  $0 --secrets-check

Vari√°veis de ambiente:
  DEBUG=true        Habilitar logs de debug
  LOG_LEVEL=info    N√≠vel de log (debug, info, warn, error)

EOF
}

# =============================================================================
# MAIN
# =============================================================================

main() {
    # Verificar depend√™ncias e estrutura
    check_dependencies
    check_project_structure
    
    # Processar argumentos
    case "${1:-}" in
        "--owasp-check")
            run_owasp_checks
            ;;
        "--secrets-check")
            check_secrets_in_code
            ;;
        "--deps-check")
            check_vulnerable_dependencies
            ;;
        "--config-check")
            check_security_configuration
            ;;
        "--all-checks")
            run_owasp_checks
            ;;
        "--help")
            show_help
            ;;
        "")
            log "INFO" "Executando verifica√ß√µes padr√£o..."
            run_owasp_checks
            ;;
        *)
            log "ERROR" "Op√ß√£o inv√°lida: $1"
            show_help
            exit 1
            ;;
    esac
}

# Executar apenas se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi