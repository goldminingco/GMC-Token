#!/bin/bash

# üöÄ GMC Ecosystem - Deployment Automation with Security Integration
# Scripts automatizados para deployment seguro em Devnet, Testnet e Mainnet
# Integra√ß√£o completa com verifica√ß√µes de seguran√ßa DevSecOps

set -euo pipefail

# =============================================================================
# CONFIGURA√á√ïES GLOBAIS
# =============================================================================

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configura√ß√µes
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")")
LOG_DIR="$PROJECT_ROOT/logs/deployment"
REPORT_DIR="$PROJECT_ROOT/reports/deployment"
CONFIG_DIR="$PROJECT_ROOT/devsecops/config"
SECURITY_SCRIPT="$SCRIPT_DIR/security-automation.sh"

# Criar diret√≥rios necess√°rios
mkdir -p "$LOG_DIR" "$REPORT_DIR"

# Timestamp para logs
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_FILE="$LOG_DIR/deployment_$TIMESTAMP.log"

# Configura√ß√µes de ambiente
ENVIRONMENT="${ENVIRONMENT:-devnet}"
SECURITY_LEVEL="${SECURITY_LEVEL:-basic}"
AUTO_CONFIRM="${AUTO_CONFIRM:-false}"
DRY_RUN="${DRY_RUN:-false}"

# =============================================================================
# FUN√á√ïES UTILIT√ÅRIAS
# =============================================================================

# Fun√ß√£o de logging
log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case $level in
        "INFO")
            echo -e "${BLUE}[$timestamp] [INFO]${NC} $message" | tee -a "$LOG_FILE"
            ;;
        "WARN")
            echo -e "${YELLOW}[$timestamp] [WARN]${NC} $message" | tee -a "$LOG_FILE"
            ;;
        "ERROR")
            echo -e "${RED}[$timestamp] [ERROR]${NC} $message" | tee -a "$LOG_FILE"
            ;;
        "SUCCESS")
            echo -e "${GREEN}[$timestamp] [SUCCESS]${NC} $message" | tee -a "$LOG_FILE"
            ;;
        "DEBUG")
            if [[ "${DEBUG:-false}" == "true" ]]; then
                echo -e "${PURPLE}[$timestamp] [DEBUG]${NC} $message" | tee -a "$LOG_FILE"
            fi
            ;;
        "SECURITY")
            echo -e "${CYAN}[$timestamp] [SECURITY]${NC} $message" | tee -a "$LOG_FILE"
            ;;
    esac
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    log "INFO" "Verificando depend√™ncias..."
    
    local deps=("cargo" "anchor" "jq" "curl" "git" "rustc" "solana")
    local missing_deps=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing_deps+=("$dep")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log "ERROR" "Depend√™ncias faltando: ${missing_deps[*]}"
        log "INFO" "Instale as depend√™ncias faltando e tente novamente."
        exit 1
    fi
    
    log "SUCCESS" "Todas as depend√™ncias est√£o instaladas."
}

# Fun√ß√£o para carregar configura√ß√£o do ambiente
load_environment_config() {
    local env=$1
    local config_file="$CONFIG_DIR/environments.yaml"
    
    if [[ ! -f "$config_file" ]]; then
        log "ERROR" "Arquivo de configura√ß√£o n√£o encontrado: $config_file"
        exit 1
    fi
    
    log "INFO" "Carregando configura√ß√£o para ambiente: $env"
    
    # Extrair configura√ß√µes usando yq ou fallback para grep/sed
    if command -v yq &> /dev/null; then
        export RPC_URL=$(yq eval ".environment_specific.$env.network.rpc_url" "$config_file")
        export CLUSTER=$(yq eval ".environment_specific.$env.network.cluster" "$config_file")
        export SECURITY_LEVEL=$(yq eval ".environment_specific.$env.security.level" "$config_file")
        export MIN_SOL_BALANCE=$(yq eval ".environment_specific.$env.sol_management.min_balance" "$config_file")
    else
        # Fallback simples para ambientes conhecidos
        case $env in
            "devnet")
                export RPC_URL="https://api.devnet.solana.com"
                export CLUSTER="devnet"
                export SECURITY_LEVEL="basic"
                export MIN_SOL_BALANCE="1.0"
                ;;
            "testnet")
                export RPC_URL="https://api.testnet.solana.com"
                export CLUSTER="testnet"
                export SECURITY_LEVEL="high"
                export MIN_SOL_BALANCE="5.0"
                ;;
            "mainnet")
                export RPC_URL="https://api.mainnet-beta.solana.com"
                export CLUSTER="mainnet-beta"
                export SECURITY_LEVEL="maximum"
                export MIN_SOL_BALANCE="10.0"
                ;;
            *)
                log "ERROR" "Ambiente n√£o suportado: $env"
                exit 1
                ;;
        esac
    fi
    
    log "SUCCESS" "Configura√ß√£o carregada: RPC=$RPC_URL, Cluster=$CLUSTER, Security=$SECURITY_LEVEL"
}

# Fun√ß√£o para verificar saldo SOL
check_sol_balance() {
    local wallet_path=$1
    local min_balance=$2
    
    log "INFO" "Verificando saldo SOL..."
    
    local current_balance
    current_balance=$(solana balance "$wallet_path" --url "$RPC_URL" 2>/dev/null | grep -o '[0-9]*\.[0-9]*' || echo "0")
    
    log "INFO" "Saldo atual: $current_balance SOL (m√≠nimo: $min_balance SOL)"
    
    if (( $(echo "$current_balance < $min_balance" | bc -l) )); then
        log "WARN" "Saldo insuficiente. Tentando airdrop..."
        
        if [[ "$CLUSTER" == "devnet" || "$CLUSTER" == "testnet" ]]; then
            local airdrop_amount=$(echo "$min_balance - $current_balance + 1" | bc -l)
            log "INFO" "Solicitando airdrop de $airdrop_amount SOL..."
            
            if solana airdrop "$airdrop_amount" "$wallet_path" --url "$RPC_URL"; then
                log "SUCCESS" "Airdrop realizado com sucesso."
            else
                log "ERROR" "Falha no airdrop. Verifique manualmente."
                return 1
            fi
        else
            log "ERROR" "Saldo insuficiente em mainnet. Adicione SOL manualmente."
            return 1
        fi
    fi
    
    return 0
}

# Fun√ß√£o para executar verifica√ß√µes de seguran√ßa
run_security_checks() {
    local security_level=$1
    
    log "SECURITY" "Executando verifica√ß√µes de seguran√ßa (n√≠vel: $security_level)..."
    
    if [[ ! -f "$SECURITY_SCRIPT" ]]; then
        log "ERROR" "Script de seguran√ßa n√£o encontrado: $SECURITY_SCRIPT"
        return 1
    fi
    
    # Tornar o script execut√°vel
    chmod +x "$SECURITY_SCRIPT"
    
    case $security_level in
        "basic")
            log "SECURITY" "Executando verifica√ß√µes b√°sicas de seguran√ßa..."
            if ! "$SECURITY_SCRIPT" --secrets-check; then
                log "ERROR" "Verifica√ß√£o de secrets falhou!"
                return 1
            fi
            ;;
        "high")
            log "SECURITY" "Executando verifica√ß√µes completas OWASP..."
            if ! "$SECURITY_SCRIPT" --owasp-check; then
                log "ERROR" "Verifica√ß√µes OWASP falharam!"
                return 1
            fi
            ;;
        "maximum")
            log "SECURITY" "Executando todas as verifica√ß√µes de seguran√ßa..."
            if ! "$SECURITY_SCRIPT" --all-checks; then
                log "ERROR" "Verifica√ß√µes de seguran√ßa falharam!"
                return 1
            fi
            ;;
        *)
            log "WARN" "N√≠vel de seguran√ßa desconhecido: $security_level"
            ;;
    esac
    
    log "SUCCESS" "Verifica√ß√µes de seguran√ßa conclu√≠das."
    return 0
}

# Fun√ß√£o para build dos programas
build_programs() {
    log "INFO" "Compilando programas..."
    
    cd "$PROJECT_ROOT"
    
    # Limpar build anterior
    if [[ -d "target" ]]; then
        log "INFO" "Limpando build anterior..."
        rm -rf target/deploy/*.so target/idl/*.json
    fi
    
    # Build com Anchor
    log "INFO" "Executando anchor build..."
    if ! anchor build; then
        log "ERROR" "Falha na compila√ß√£o dos programas!"
        return 1
    fi
    
    # Verificar se os arquivos foram gerados
    local program_files=("target/deploy/gmc_token.so" "target/deploy/gmc_staking.so")
    
    for file in "${program_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            log "ERROR" "Arquivo de programa n√£o encontrado: $file"
            return 1
        fi
        
        local file_size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
        log "INFO" "Programa compilado: $(basename "$file") ($file_size bytes)"
    done
    
    log "SUCCESS" "Compila√ß√£o conclu√≠da com sucesso."
    return 0
}

# Fun√ß√£o para executar testes
run_tests() {
    local test_level=$1
    
    log "INFO" "Executando testes (n√≠vel: $test_level)..."
    
    cd "$PROJECT_ROOT"
    
    case $test_level in
        "basic")
            log "INFO" "Executando testes unit√°rios..."
            if ! cargo test --workspace; then
                log "ERROR" "Testes unit√°rios falharam!"
                return 1
            fi
            ;;
        "high")
            log "INFO" "Executando testes unit√°rios e de integra√ß√£o..."
            if ! cargo test --workspace; then
                log "ERROR" "Testes falharam!"
                return 1
            fi
            
            if command -v anchor &> /dev/null; then
                log "INFO" "Executando testes Anchor..."
                if ! anchor test --skip-local-validator; then
                    log "WARN" "Alguns testes Anchor falharam (pode ser normal em alguns ambientes)."
                fi
            fi
            ;;
        "maximum")
            log "INFO" "Executando suite completa de testes..."
            if ! cargo test --workspace --release; then
                log "ERROR" "Testes falharam!"
                return 1
            fi
            
            # Testes de cobertura se dispon√≠vel
            if command -v cargo-tarpaulin &> /dev/null; then
                log "INFO" "Executando an√°lise de cobertura..."
                cargo tarpaulin --out xml --output-dir "$REPORT_DIR/coverage/" || log "WARN" "An√°lise de cobertura falhou."
            fi
            ;;
    esac
    
    log "SUCCESS" "Testes conclu√≠dos."
    return 0
}

# Fun√ß√£o para deploy dos programas
deploy_programs() {
    local environment=$1
    local dry_run=$2
    
    log "INFO" "Iniciando deploy para $environment (dry-run: $dry_run)..."
    
    cd "$PROJECT_ROOT"
    
    # Configurar Solana CLI
    log "INFO" "Configurando Solana CLI..."
    solana config set --url "$RPC_URL"
    solana config set --keypair "$HOME/.config/solana/id.json"
    
    # Verificar conex√£o
    if ! solana cluster-version; then
        log "ERROR" "Falha na conex√£o com o cluster $CLUSTER"
        return 1
    fi
    
    # Deploy com Anchor
    if [[ "$dry_run" == "true" ]]; then
        log "INFO" "Modo dry-run: simulando deploy..."
        anchor deploy --provider.cluster "$CLUSTER" --dry-run
    else
        log "INFO" "Executando deploy real..."
        
        # Confirma√ß√£o para ambientes cr√≠ticos
        if [[ "$environment" == "mainnet" && "$AUTO_CONFIRM" != "true" ]]; then
            echo -n "‚ö†Ô∏è  ATEN√á√ÉO: Deploy para MAINNET. Confirma? (yes/no): "
            read -r confirmation
            if [[ "$confirmation" != "yes" ]]; then
                log "INFO" "Deploy cancelado pelo usu√°rio."
                return 1
            fi
        fi
        
        if ! anchor deploy --provider.cluster "$CLUSTER"; then
            log "ERROR" "Falha no deploy dos programas!"
            return 1
        fi
    fi
    
    log "SUCCESS" "Deploy conclu√≠do com sucesso."
    return 0
}

# Fun√ß√£o para valida√ß√£o p√≥s-deploy
post_deploy_validation() {
    local environment=$1
    
    log "INFO" "Executando valida√ß√£o p√≥s-deploy..."
    
    # Verificar se os programas est√£o ativos
    local program_ids=()
    
    if [[ -f "target/idl/gmc_token.json" ]]; then
        local token_program_id
        token_program_id=$(jq -r '.metadata.address' target/idl/gmc_token.json)
        program_ids+=("$token_program_id")
    fi
    
    for program_id in "${program_ids[@]}"; do
        log "INFO" "Verificando programa: $program_id"
        
        if solana account "$program_id" --url "$RPC_URL" > /dev/null 2>&1; then
            log "SUCCESS" "Programa ativo: $program_id"
        else
            log "ERROR" "Programa n√£o encontrado: $program_id"
            return 1
        fi
    done
    
    # Testes de smoke
    log "INFO" "Executando smoke tests..."
    
    # Aqui voc√™ pode adicionar testes espec√≠ficos para verificar
    # se os contratos est√£o funcionando corretamente
    
    log "SUCCESS" "Valida√ß√£o p√≥s-deploy conclu√≠da."
    return 0
}

# Fun√ß√£o para setup de monitoramento
setup_monitoring() {
    local environment=$1
    
    log "INFO" "Configurando monitoramento para $environment..."
    
    # Criar arquivo de configura√ß√£o de monitoramento
    local monitoring_config="$REPORT_DIR/monitoring_$environment.json"
    
    cat > "$monitoring_config" << EOF
{
  "environment": "$environment",
  "cluster": "$CLUSTER",
  "rpc_url": "$RPC_URL",
  "deployed_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "programs": [],
  "monitoring": {
    "health_check_interval": "60s",
    "alert_thresholds": {
      "response_time": "5s",
      "error_rate": "1%",
      "availability": "99.9%"
    }
  }
}
EOF
    
    log "SUCCESS" "Configura√ß√£o de monitoramento criada: $monitoring_config"
    
    # Configurar alertas espec√≠ficos por ambiente
    case $environment in
        "mainnet")
            log "INFO" "Configurando monitoramento 24/7 para mainnet..."
            # Aqui voc√™ pode integrar com sistemas de monitoramento
            # como Datadog, New Relic, Prometheus, etc.
            ;;
        "testnet")
            log "INFO" "Configurando monitoramento de bug bounty..."
            ;;
        "devnet")
            log "INFO" "Configurando monitoramento b√°sico..."
            ;;
    esac
    
    return 0
}

# Fun√ß√£o para gerar relat√≥rio de deployment
generate_deployment_report() {
    local environment=$1
    local status=$2
    
    local report_file="$REPORT_DIR/deployment_${environment}_$TIMESTAMP.json"
    
    cat > "$report_file" << EOF
{
  "deployment": {
    "environment": "$environment",
    "cluster": "$CLUSTER",
    "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
    "status": "$status",
    "security_level": "$SECURITY_LEVEL",
    "dry_run": "$DRY_RUN"
  },
  "configuration": {
    "rpc_url": "$RPC_URL",
    "min_sol_balance": "$MIN_SOL_BALANCE"
  },
  "artifacts": {
    "log_file": "$LOG_FILE",
    "report_file": "$report_file"
  },
  "next_steps": [
    "Verificar monitoramento",
    "Executar testes de aceita√ß√£o",
    "Notificar stakeholders"
  ]
}
EOF
    
    log "INFO" "Relat√≥rio de deployment gerado: $report_file"
    echo "$report_file"
}

# Fun√ß√£o para rollback
perform_rollback() {
    local environment=$1
    local reason=$2
    
    log "ERROR" "Iniciando rollback para $environment. Raz√£o: $reason"
    
    # Implementar l√≥gica de rollback espec√≠fica
    # Isso pode incluir:
    # - Restaurar vers√£o anterior dos programas
    # - Reverter configura√ß√µes
    # - Notificar equipes
    
    log "INFO" "Rollback conclu√≠do para $environment"
    
    # Gerar relat√≥rio de rollback
    generate_deployment_report "$environment" "rolled_back"
    
    return 0
}

# =============================================================================
# FUN√á√ïES PRINCIPAIS DE DEPLOYMENT
# =============================================================================

# Deploy para Devnet
deploy_devnet() {
    log "INFO" "üöÄ Iniciando deployment para DEVNET..."
    
    load_environment_config "devnet"
    
    # Verifica√ß√µes b√°sicas
    if ! check_sol_balance "$HOME/.config/solana/id.json" "$MIN_SOL_BALANCE"; then
        log "ERROR" "Falha na verifica√ß√£o de saldo."
        return 1
    fi
    
    # Verifica√ß√µes de seguran√ßa b√°sicas
    if ! run_security_checks "$SECURITY_LEVEL"; then
        log "ERROR" "Verifica√ß√µes de seguran√ßa falharam."
        return 1
    fi
    
    # Build e testes
    if ! build_programs; then
        log "ERROR" "Falha na compila√ß√£o."
        return 1
    fi
    
    if ! run_tests "basic"; then
        log "ERROR" "Falha nos testes."
        return 1
    fi
    
    # Deploy
    if ! deploy_programs "devnet" "$DRY_RUN"; then
        log "ERROR" "Falha no deploy."
        perform_rollback "devnet" "deploy_failed"
        return 1
    fi
    
    # Valida√ß√£o p√≥s-deploy
    if ! post_deploy_validation "devnet"; then
        log "ERROR" "Falha na valida√ß√£o p√≥s-deploy."
        perform_rollback "devnet" "validation_failed"
        return 1
    fi
    
    # Setup de monitoramento
    setup_monitoring "devnet"
    
    # Gerar relat√≥rio
    generate_deployment_report "devnet" "success"
    
    log "SUCCESS" "‚úÖ Deployment para DEVNET conclu√≠do com sucesso!"
    return 0
}

# Deploy para Testnet
deploy_testnet() {
    log "INFO" "üöÄ Iniciando deployment para TESTNET..."
    
    load_environment_config "testnet"
    
    # Verifica√ß√µes rigorosas
    if ! check_sol_balance "$HOME/.config/solana/id.json" "$MIN_SOL_BALANCE"; then
        log "ERROR" "Falha na verifica√ß√£o de saldo."
        return 1
    fi
    
    # Verifica√ß√µes de seguran√ßa completas
    if ! run_security_checks "$SECURITY_LEVEL"; then
        log "ERROR" "Verifica√ß√µes de seguran√ßa falharam."
        return 1
    fi
    
    # Build e testes completos
    if ! build_programs; then
        log "ERROR" "Falha na compila√ß√£o."
        return 1
    fi
    
    if ! run_tests "high"; then
        log "ERROR" "Falha nos testes."
        return 1
    fi
    
    # Confirma√ß√£o manual se n√£o for auto
    if [[ "$AUTO_CONFIRM" != "true" ]]; then
        echo -n "Confirma deployment para TESTNET? (yes/no): "
        read -r confirmation
        if [[ "$confirmation" != "yes" ]]; then
            log "INFO" "Deploy cancelado pelo usu√°rio."
            return 1
        fi
    fi
    
    # Deploy
    if ! deploy_programs "testnet" "$DRY_RUN"; then
        log "ERROR" "Falha no deploy."
        perform_rollback "testnet" "deploy_failed"
        return 1
    fi
    
    # Valida√ß√£o p√≥s-deploy
    if ! post_deploy_validation "testnet"; then
        log "ERROR" "Falha na valida√ß√£o p√≥s-deploy."
        perform_rollback "testnet" "validation_failed"
        return 1
    fi
    
    # Setup de monitoramento
    setup_monitoring "testnet"
    
    # Notificar bug bounty
    log "INFO" "Notificando programa de bug bounty..."
    
    # Gerar relat√≥rio
    generate_deployment_report "testnet" "success"
    
    log "SUCCESS" "‚úÖ Deployment para TESTNET conclu√≠do com sucesso!"
    log "INFO" "üêõ Bug bounty ativo - monitore relat√≥rios de seguran√ßa."
    return 0
}

# Deploy para Mainnet (Cerim√¥nia)
deploy_mainnet() {
    log "INFO" "üöÄ Iniciando CERIM√îNIA DE DEPLOYMENT para MAINNET..."
    
    load_environment_config "mainnet"
    
    # Verifica√ß√µes m√°ximas de seguran√ßa
    log "SECURITY" "Executando auditoria final de seguran√ßa..."
    if ! run_security_checks "maximum"; then
        log "ERROR" "Auditoria de seguran√ßa falhou - DEPLOYMENT BLOQUEADO!"
        return 1
    fi
    
    # Verifica√ß√µes de saldo cr√≠ticas
    if ! check_sol_balance "$HOME/.config/solana/id.json" "$MIN_SOL_BALANCE"; then
        log "ERROR" "Saldo insuficiente para mainnet."
        return 1
    fi
    
    # Build e testes m√°ximos
    if ! build_programs; then
        log "ERROR" "Falha na compila√ß√£o."
        return 1
    fi
    
    if ! run_tests "maximum"; then
        log "ERROR" "Falha nos testes."
        return 1
    fi
    
    # M√∫ltiplas confirma√ß√µes
    log "WARN" "‚ö†Ô∏è  ATEN√á√ÉO: DEPLOYMENT PARA MAINNET ‚ö†Ô∏è"
    log "WARN" "Este √© um deployment irrevers√≠vel para a rede principal."
    log "WARN" "Todos os testes e auditorias foram executados."
    
    if [[ "$AUTO_CONFIRM" != "true" ]]; then
        echo -n "PRIMEIRA CONFIRMA√á√ÉO - Prosseguir com mainnet? (yes/no): "
        read -r confirmation1
        if [[ "$confirmation1" != "yes" ]]; then
            log "INFO" "Deploy cancelado na primeira confirma√ß√£o."
            return 1
        fi
        
        echo -n "SEGUNDA CONFIRMA√á√ÉO - Tem certeza absoluta? (yes/no): "
        read -r confirmation2
        if [[ "$confirmation2" != "yes" ]]; then
            log "INFO" "Deploy cancelado na segunda confirma√ß√£o."
            return 1
        fi
        
        echo -n "CONFIRMA√á√ÉO FINAL - Digite 'DEPLOY MAINNET' para confirmar: "
        read -r final_confirmation
        if [[ "$final_confirmation" != "DEPLOY MAINNET" ]]; then
            log "INFO" "Deploy cancelado na confirma√ß√£o final."
            return 1
        fi
    fi
    
    # Deploy cerimonial
    log "INFO" "üéØ Executando deployment cerimonial..."
    if ! deploy_programs "mainnet" "$DRY_RUN"; then
        log "ERROR" "FALHA CR√çTICA NO DEPLOY MAINNET!"
        perform_rollback "mainnet" "critical_deploy_failure"
        return 1
    fi
    
    # Valida√ß√£o cr√≠tica p√≥s-deploy
    if ! post_deploy_validation "mainnet"; then
        log "ERROR" "FALHA CR√çTICA NA VALIDA√á√ÉO MAINNET!"
        perform_rollback "mainnet" "critical_validation_failure"
        return 1
    fi
    
    # Setup de monitoramento 24/7
    setup_monitoring "mainnet"
    
    # Ativar monitoramento cont√≠nuo
    log "INFO" "üîç Ativando monitoramento 24/7..."
    
    # Gerar relat√≥rio final
    generate_deployment_report "mainnet" "success"
    
    log "SUCCESS" "üéâ DEPLOYMENT MAINNET CONCLU√çDO COM SUCESSO! üéâ"
    log "SUCCESS" "üöÄ GMC Ecosystem est√° LIVE na rede principal!"
    log "INFO" "üìä Monitoramento 24/7 ativo."
    log "INFO" "üîî Notifica√ß√µes de emerg√™ncia configuradas."
    
    return 0
}

# =============================================================================
# FUN√á√ÉO DE AJUDA
# =============================================================================

show_help() {
    cat << EOF
üöÄ GMC Deployment Automation Script

Uso: $0 [AMBIENTE] [OP√á√ïES]

Ambientes:
  devnet      Deploy para Devnet (desenvolvimento)
  testnet     Deploy para Testnet (testes e bug bounty)
  mainnet     Deploy cerimonial para Mainnet (produ√ß√£o)

Op√ß√µes:
  --dry-run           Simular deployment sem executar
  --auto-confirm      Pular confirma√ß√µes manuais
  --security-level    N√≠vel de seguran√ßa (basic|high|maximum)
  --help             Mostrar esta ajuda

Exemplos:
  $0 devnet
  $0 testnet --security-level high
  $0 mainnet --dry-run
  $0 devnet --auto-confirm

Vari√°veis de ambiente:
  ENVIRONMENT         Ambiente alvo (devnet|testnet|mainnet)
  SECURITY_LEVEL      N√≠vel de seguran√ßa
  AUTO_CONFIRM        Confirma√ß√£o autom√°tica (true|false)
  DRY_RUN            Modo simula√ß√£o (true|false)
  DEBUG              Logs de debug (true|false)

Fluxo de deployment:
  1. Verifica√ß√£o de depend√™ncias
  2. Carregamento de configura√ß√£o
  3. Verifica√ß√£o de saldo SOL
  4. Verifica√ß√µes de seguran√ßa
  5. Compila√ß√£o dos programas
  6. Execu√ß√£o de testes
  7. Deploy dos contratos
  8. Valida√ß√£o p√≥s-deploy
  9. Setup de monitoramento
  10. Gera√ß√£o de relat√≥rios

EOF
}

# =============================================================================
# MAIN
# =============================================================================

main() {
    # Banner
    echo -e "${CYAN}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo "üîí GMC ECOSYSTEM - DEPLOYMENT AUTOMATION WITH DEVSECOPS üîí"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo -e "${NC}"
    
    # Verificar depend√™ncias
    check_dependencies
    
    # Processar argumentos
    local environment=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            "devnet"|"testnet"|"mainnet")
                environment="$1"
                shift
                ;;
            "--dry-run")
                export DRY_RUN="true"
                shift
                ;;
            "--auto-confirm")
                export AUTO_CONFIRM="true"
                shift
                ;;
            "--security-level")
                export SECURITY_LEVEL="$2"
                shift 2
                ;;
            "--help")
                show_help
                exit 0
                ;;
            *)
                log "ERROR" "Op√ß√£o inv√°lida: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Verificar se ambiente foi especificado
    if [[ -z "$environment" ]]; then
        log "ERROR" "Ambiente n√£o especificado."
        show_help
        exit 1
    fi
    
    # Executar deployment baseado no ambiente
    case $environment in
        "devnet")
            deploy_devnet
            ;;
        "testnet")
            deploy_testnet
            ;;
        "mainnet")
            deploy_mainnet
            ;;
        *)
            log "ERROR" "Ambiente inv√°lido: $environment"
            exit 1
            ;;
    esac
    
    local exit_code=$?
    
    if [[ $exit_code -eq 0 ]]; then
        log "SUCCESS" "üéâ Deployment conclu√≠do com sucesso!"
    else
        log "ERROR" "‚ùå Deployment falhou!"
    fi
    
    exit $exit_code
}

# Executar apenas se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi