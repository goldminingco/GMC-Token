import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { assert } from "chai";
import { debugSignatureError } from "../scripts/check_signature_setup";

/**
 * üîê Exemplo Pr√°tico de Resolu√ß√£o de Problemas de Assinatura
 * 
 * Este arquivo demonstra as pr√°ticas corretas para evitar erros
 * de "Signature verification failed" no GMC Ecosystem.
 */

describe("Signature Resolution Examples", () => {
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);

  // ‚úÖ CORRETO: Keypairs para entidades que precisam assinar
  const admin = anchor.web3.Keypair.generate();
  const user1 = anchor.web3.Keypair.generate();
  const user2 = anchor.web3.Keypair.generate();

  before(async () => {
    console.log("üîë Configurando keypairs para testes...");
    
    // ‚úÖ CORRETO: Airdrop para todos os signers
    const airdropPromises = [admin, user1, user2].map(async (keypair) => {
      try {
        const signature = await provider.connection.requestAirdrop(
          keypair.publicKey,
          10 * anchor.web3.LAMPORTS_PER_SOL
        );
        await provider.connection.confirmTransaction(signature);
        console.log(`   ‚úÖ Airdrop para ${keypair.publicKey.toString().slice(0, 8)}...`);
      } catch (error) {
        console.warn(`   ‚ö†Ô∏è Airdrop falhou para ${keypair.publicKey.toString().slice(0, 8)}...`);
      }
    });

    await Promise.all(airdropPromises);
  });

  describe("‚ùå Exemplos de Problemas Comuns", () => {
    it("PROBLEMA: Usar PublicKey onde Signer √© esperado", async () => {
      // ‚ùå ERRO: Este padr√£o causar√° "Signature verification failed"
      
      // const wrongAuthority = new anchor.web3.PublicKey("11111111111111111111111111111111");
      // 
      // await program.methods
      //   .initialize()
      //   .accounts({
      //     authority: wrongAuthority, // ‚ùå N√£o pode assinar!
      //   })
      //   .rpc(); // ‚ùå Falhar√° com signature error
      
      console.log("‚ùå Exemplo de erro: Usar PublicKey sem capacidade de assinar");
      console.log("   Solu√ß√£o: Use anchor.web3.Keypair.generate() em vez de PublicKey");
    });

    it("PROBLEMA: Esquecer de incluir signer na lista", async () => {
      // ‚ùå ERRO: Ter o Keypair mas n√£o incluir em .signers([])
      
      // const authority = anchor.web3.Keypair.generate();
      // 
      // await program.methods
      //   .initialize()
      //   .accounts({
      //     authority: authority.publicKey,
      //   })
      //   // ‚ùå .signers([authority]) // Esqueceu de incluir!
      //   .rpc(); // ‚ùå Falhar√° com signature error
      
      console.log("‚ùå Exemplo de erro: Esquecer .signers([keypair])");
      console.log("   Solu√ß√£o: Sempre incluir Keypairs em .signers([])");
    });

    it("PROBLEMA: Marcar PDA como Signer no Rust", async () => {
      // ‚ùå ERRO: No Rust, marcar PDA como Signer<'info>
      
      // #[derive(Accounts)]
      // pub struct BadExample<'info> {
      //     #[account(mut)]
      //     pub my_pda: Signer<'info>, // ‚ùå PDAs n√£o podem assinar!
      // }
      
      console.log("‚ùå Exemplo de erro: PDA marcado como Signer no Rust");
      console.log("   Solu√ß√£o: Use Account<'info, T> para PDAs, nunca Signer<'info>");
    });
  });

  describe("‚úÖ Exemplos de Solu√ß√µes Corretas", () => {
    it("SOLU√á√ÉO: Configura√ß√£o correta de admin signer", async () => {
      // ‚úÖ CORRETO: Admin como Keypair que pode assinar
      console.log("‚úÖ Exemplo correto: Admin signer");
      console.log("   Admin pubkey:", admin.publicKey.toString());
      
      // ‚úÖ Verificar se admin tem saldo
      const balance = await provider.connection.getBalance(admin.publicKey);
      console.log("   Admin balance:", balance / anchor.web3.LAMPORTS_PER_SOL, "SOL");
      
      assert.isTrue(balance > 0, "Admin deve ter SOL para pagar taxas");
    });

    it("SOLU√á√ÉO: Configura√ß√£o correta de user signer", async () => {
      // ‚úÖ CORRETO: User como Keypair que pode assinar
      console.log("‚úÖ Exemplo correto: User signer");
      console.log("   User1 pubkey:", user1.publicKey.toString());
      console.log("   User2 pubkey:", user2.publicKey.toString());
      
      // ‚úÖ Verificar se users t√™m saldo
      const balance1 = await provider.connection.getBalance(user1.publicKey);
      const balance2 = await provider.connection.getBalance(user2.publicKey);
      
      console.log("   User1 balance:", balance1 / anchor.web3.LAMPORTS_PER_SOL, "SOL");
      console.log("   User2 balance:", balance2 / anchor.web3.LAMPORTS_PER_SOL, "SOL");
      
      assert.isTrue(balance1 > 0, "User1 deve ter SOL");
      assert.isTrue(balance2 > 0, "User2 deve ter SOL");
    });

    it("SOLU√á√ÉO: Configura√ß√£o correta de PDA (n√£o assina)", async () => {
      // ‚úÖ CORRETO: PDA derivado corretamente
      const [userStatePda, bump] = anchor.web3.PublicKey.findProgramAddressSync(
        [Buffer.from("user_state"), user1.publicKey.toBuffer()],
        new anchor.web3.PublicKey("11111111111111111111111111111111") // Program ID de exemplo
      );
      
      console.log("‚úÖ Exemplo correto: PDA n√£o assina");
      console.log("   PDA:", userStatePda.toString());
      console.log("   Bump:", bump);
      
      // ‚úÖ PDA n√£o precisa estar em .signers([])
      // ‚úÖ No Rust seria: pub user_state: Account<'info, UserState>
      
      assert.isDefined(userStatePda, "PDA deve ser derivado corretamente");
    });

    it("SOLU√á√ÉO: Padr√£o completo de transa√ß√£o com signers", async () => {
      // ‚úÖ EXEMPLO COMPLETO: Como estruturar uma transa√ß√£o corretamente
      
      console.log("‚úÖ Exemplo completo: Transa√ß√£o com m√∫ltiplos signers");
      
      // 1. ‚úÖ Definir signers necess√°rios
      const authority = admin; // Quem tem permiss√£o admin
      const payer = user1;     // Quem paga as taxas
      const receiver = user2;  // Destinat√°rio (n√£o precisa assinar)
      
      // 2. ‚úÖ Derivar PDAs (n√£o assinam)
      const [configPda] = anchor.web3.PublicKey.findProgramAddressSync(
        [Buffer.from("config")],
        new anchor.web3.PublicKey("11111111111111111111111111111111")
      );
      
      // 3. ‚úÖ Preparar contas para a transa√ß√£o
      const accounts = {
        authority: authority.publicKey,
        payer: payer.publicKey,
        receiver: receiver.publicKey,
        config: configPda, // PDA - n√£o assina
        systemProgram: anchor.web3.SystemProgram.programId,
      };
      
      // 4. ‚úÖ Preparar signers
      const signers = [authority, payer]; // Apenas quem precisa assinar
      
      // 5. ‚úÖ Debug se necess√°rio
      await debugSignatureError(
        "ExampleProgram",
        "exampleMethod",
        accounts,
        signers
      );
      
      console.log("   Accounts configuradas:", Object.keys(accounts).length);
      console.log("   Signers preparados:", signers.length);
      
      // 6. ‚úÖ Estrutura da transa√ß√£o seria:
      // await program.methods
      //   .exampleMethod(params)
      //   .accounts(accounts)
      //   .signers(signers) // ‚úÖ Incluir todos os signers necess√°rios
      //   .rpc();
      
      assert.equal(signers.length, 2, "Deve ter exatamente 2 signers");
    });
  });

  describe("üîç Debugging e Verifica√ß√£o", () => {
    it("Verificar configura√ß√£o do provider", async () => {
      console.log("üîç Verificando configura√ß√£o do provider...");
      
      // ‚úÖ Provider deve estar configurado
      assert.isDefined(provider, "Provider deve estar definido");
      assert.isDefined(provider.wallet, "Wallet deve estar definida");
      assert.isDefined(provider.connection, "Connection deve estar definida");
      
      console.log("   Provider wallet:", provider.wallet.publicKey.toString());
      console.log("   Connection endpoint:", provider.connection.rpcEndpoint);
      
      // ‚úÖ Verificar se pode obter informa√ß√µes da blockchain
      const slot = await provider.connection.getSlot();
      console.log("   Current slot:", slot);
      
      assert.isNumber(slot, "Deve conseguir obter slot atual");
    });

    it("Verificar capacidade de assinar", async () => {
      console.log("üîç Verificando capacidade de assinar...");
      
      // ‚úÖ Criar transa√ß√£o de teste
      const testTx = new anchor.web3.Transaction();
      testTx.add(
        anchor.web3.SystemProgram.transfer({
          fromPubkey: user1.publicKey,
          toPubkey: user2.publicKey,
          lamports: 1, // 1 lamport
        })
      );
      
      // ‚úÖ Configurar transa√ß√£o
      const recentBlockhash = await provider.connection.getRecentBlockhash();
      testTx.recentBlockhash = recentBlockhash.blockhash;
      testTx.feePayer = user1.publicKey;
      
      // ‚úÖ Assinar com user1
      testTx.sign(user1);
      
      console.log("   ‚úÖ Transa√ß√£o assinada com sucesso");
      console.log("   Signature:", testTx.signatures[0].signature ? "Present" : "Missing");
      
      assert.isNotNull(testTx.signatures[0].signature, "Assinatura deve estar presente");
    });
  });

  describe("üìö Refer√™ncias e Dicas", () => {
    it("Documentar padr√µes recomendados", () => {
      console.log("üìö Padr√µes recomendados para GMC Ecosystem:");
      console.log("");
      console.log("‚úÖ SEMPRE FAZER:");
      console.log("   ‚Ä¢ Use anchor.web3.Keypair.generate() para signers");
      console.log("   ‚Ä¢ Inclua todos os Keypairs em .signers([])");
      console.log("   ‚Ä¢ Fa√ßa airdrop para contas que precisam de SOL");
      console.log("   ‚Ä¢ Use Account<'info, T> para PDAs no Rust");
      console.log("   ‚Ä¢ Configure provider corretamente");
      console.log("");
      console.log("‚ùå NUNCA FAZER:");
      console.log("   ‚Ä¢ Usar PublicKey onde Signer √© esperado");
      console.log("   ‚Ä¢ Marcar PDAs como Signer<'info> no Rust");
      console.log("   ‚Ä¢ Esquecer de incluir signers em .signers([])");
      console.log("   ‚Ä¢ Assumir que contas t√™m SOL sem verificar");
      console.log("");
      console.log("üîß PARA DEBUG:");
      console.log("   ‚Ä¢ Use debugSignatureError() para an√°lise detalhada");
      console.log("   ‚Ä¢ Verifique logs de transa√ß√£o em caso de erro");
      console.log("   ‚Ä¢ Execute npm run check:signature para verifica√ß√£o");
    });
  });
}); 