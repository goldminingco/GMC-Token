#!/bin/bash
# üß™ GMC Token - Teste do Sistema de Vesting
# Etapa 2.6: Sistema de Vesting (Libera√ß√£o gradual de tokens)

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${BLUE}üß™ GMC Token - Teste do Sistema de Vesting${NC}"
echo "============================================="
echo

# Informa√ß√µes do deploy
PROGRAM_ID="55pd9gckYTZBuKb8HanYNBeMjAf7Z298qX6awqdEV3JM"

echo -e "${YELLOW}üìã REQUISITOS A TESTAR:${NC}"
echo -e "${CYAN}   ‚Ä¢ Vesting da Equipe: 2M GMC ao longo de 5 anos${NC}"
echo -e "${CYAN}   ‚Ä¢ Reserva Estrat√©gica: 10M GMC ao longo de 5 anos${NC}"
echo -e "${CYAN}   ‚Ä¢ Libera√ß√£o Gradual: Mensal ou trimestral${NC}"
echo -e "${CYAN}   ‚Ä¢ Cliff Period: Per√≠odo inicial sem libera√ß√£o${NC}"
echo -e "${CYAN}   ‚Ä¢ Anti-Dump: Prote√ß√£o contra venda massiva${NC}"
echo -e "${CYAN}   ‚Ä¢ Governan√ßa: Controle multisig das libera√ß√µes${NC}"
echo

# Fun√ß√£o para log de teste
log_test() {
    local test_name="$1"
    local status="$2"
    local details="$3"
    
    if [ "$status" = "PASS" ]; then
        echo -e "${GREEN}‚úÖ $test_name${NC}"
        [ -n "$details" ] && echo -e "${CYAN}   ‚îî‚îÄ $details${NC}"
    elif [ "$status" = "FAIL" ]; then
        echo -e "${RED}‚ùå $test_name${NC}"
        [ -n "$details" ] && echo -e "${RED}   ‚îî‚îÄ $details${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è $test_name${NC}"
        [ -n "$details" ] && echo -e "${YELLOW}   ‚îî‚îÄ $details${NC}"
    fi
}

# Contadores de teste
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# Fun√ß√£o para testar c√°lculo de vesting
test_vesting_calculation() {
    local vesting_name="$1"
    local total_amount="$2"
    local duration_months="$3"
    local cliff_months="$4"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -e "${BLUE}üîç Testando $vesting_name${NC}"
    
    # Calcular quantidade mensal ap√≥s cliff
    local vesting_months=$((duration_months - cliff_months))
    local monthly_amount=$((total_amount / vesting_months))
    
    # Verificar se o c√°lculo est√° correto
    local total_vested=$((monthly_amount * vesting_months))
    local diff=$((total_vested - total_amount))
    if [ "$diff" -lt 0 ]; then
        diff=$((-diff))
    fi
    
    # Toler√¢ncia de 1% para arredondamentos
    local tolerance=$((total_amount / 100))
    
    if [ "$diff" -le "$tolerance" ]; then
        log_test "$vesting_name C√°lculo" "PASS" "$monthly_amount tokens/m√™s por $vesting_months meses"
        PASSED_TESTS=$((PASSED_TESTS + 1))
    else
        log_test "$vesting_name C√°lculo" "FAIL" "Diferen√ßa: $diff tokens (toler√¢ncia: $tolerance)"
        FAILED_TESTS=$((FAILED_TESTS + 1))
    fi
}

# Fun√ß√£o para testar cronograma de libera√ß√£o
test_vesting_schedule() {
    local test_name="$1"
    local start_timestamp="$2"
    local cliff_months="$3"
    local duration_months="$4"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -e "${BLUE}üîç Testando $test_name${NC}"
    
    # Calcular timestamps importantes
    local cliff_timestamp=$((start_timestamp + (cliff_months * 30 * 24 * 3600)))
    local end_timestamp=$((start_timestamp + (duration_months * 30 * 24 * 3600)))
    
    # Verificar se os timestamps s√£o l√≥gicos
    if [ "$cliff_timestamp" -gt "$start_timestamp" ] && [ "$end_timestamp" -gt "$cliff_timestamp" ]; then
        log_test "$test_name" "PASS" "Cronograma v√°lido: cliff $cliff_months meses, total $duration_months meses"
        PASSED_TESTS=$((PASSED_TESTS + 1))
    else
        log_test "$test_name" "FAIL" "Cronograma inv√°lido"
        FAILED_TESTS=$((FAILED_TESTS + 1))
    fi
}

echo -e "${YELLOW}üîç ETAPA 2.6: SISTEMA DE VESTING${NC}"
echo "=================================="
echo

echo -e "${BLUE}üìä Teste 1: C√°lculos de Vesting${NC}"
echo "------------------------------"

# Testar vesting da equipe: 2M GMC em 5 anos (60 meses) com cliff de 12 meses
test_vesting_calculation "Equipe" 2000000000000000 60 12  # 2M GMC com 9 decimais

# Testar reserva estrat√©gica: 10M GMC em 5 anos (60 meses) com cliff de 6 meses
test_vesting_calculation "Reserva_Estrat√©gica" 10000000000000000 60 6  # 10M GMC com 9 decimais

echo
echo -e "${BLUE}‚è∞ Teste 2: Cronogramas de Libera√ß√£o${NC}"
echo "----------------------------------"

# Timestamp atual simulado (1 de janeiro de 2025)
current_timestamp=1735689600

# Testar cronograma da equipe
test_vesting_schedule "Cronograma Equipe" $current_timestamp 12 60

# Testar cronograma da reserva estrat√©gica
test_vesting_schedule "Cronograma Reserva" $current_timestamp 6 60

echo
echo -e "${BLUE}üîß Teste 3: Valida√ß√£o de Constantes do C√≥digo${NC}"
echo "--------------------------------------------"

# Verificar se as constantes est√£o corretas no c√≥digo deployado
TOTAL_TESTS=$((TOTAL_TESTS + 1))
if grep -q "TEAM_VESTING_AMOUNT\|team.*2000000\|2_000_000" /Users/cliente/Documents/GMC-Token/programs/gmc_token_native/src/vesting.rs; then
    log_test "Vesting Equipe (2M GMC)" "PASS" "Quantidade definida corretamente"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    log_test "Vesting Equipe (2M GMC)" "WARN" "Quantidade n√£o claramente identificada"
fi

TOTAL_TESTS=$((TOTAL_TESTS + 1))
if grep -q "STRATEGIC_RESERVE_AMOUNT\|strategic.*10000000\|10_000_000" /Users/cliente/Documents/GMC-Token/programs/gmc_token_native/src/vesting.rs; then
    log_test "Reserva Estrat√©gica (10M GMC)" "PASS" "Quantidade definida corretamente"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    log_test "Reserva Estrat√©gica (10M GMC)" "WARN" "Quantidade n√£o claramente identificada"
fi

TOTAL_TESTS=$((TOTAL_TESTS + 1))
if grep -q "VESTING_DURATION.*60\|60.*month\|5.*year" /Users/cliente/Documents/GMC-Token/programs/gmc_token_native/src/vesting.rs; then
    log_test "Dura√ß√£o Vesting (5 anos)" "PASS" "Dura√ß√£o definida corretamente"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    log_test "Dura√ß√£o Vesting (5 anos)" "WARN" "Dura√ß√£o n√£o claramente identificada"
fi

echo
echo -e "${BLUE}üõ°Ô∏è Teste 4: Prote√ß√µes Anti-Dump${NC}"
echo "-------------------------------"

TOTAL_TESTS=$((TOTAL_TESTS + 1))
if grep -q "cliff\|CLIFF\|lock.*period" /Users/cliente/Documents/GMC-Token/programs/gmc_token_native/src/vesting.rs; then
    log_test "Cliff Period" "PASS" "Per√≠odo de cliff implementado"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    log_test "Cliff Period" "WARN" "Per√≠odo de cliff n√£o claramente identificado"
fi

TOTAL_TESTS=$((TOTAL_TESTS + 1))
if grep -q "gradual\|linear\|monthly\|schedule" /Users/cliente/Documents/GMC-Token/programs/gmc_token_native/src/vesting.rs; then
    log_test "Libera√ß√£o Gradual" "PASS" "Sistema gradual implementado"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    log_test "Libera√ß√£o Gradual" "WARN" "Sistema gradual n√£o claramente identificado"
fi

echo
echo -e "${BLUE}üîê Teste 5: Controle de Governan√ßa${NC}"
echo "--------------------------------"

TOTAL_TESTS=$((TOTAL_TESTS + 1))
if grep -q "authority\|multisig\|governance" /Users/cliente/Documents/GMC-Token/programs/gmc_token_native/src/vesting.rs; then
    log_test "Controle de Autoridade" "PASS" "Sistema de autoridade implementado"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    log_test "Controle de Autoridade" "WARN" "Sistema de autoridade n√£o claramente identificado"
fi

TOTAL_TESTS=$((TOTAL_TESTS + 1))
if grep -q "claim\|withdraw\|release" /Users/cliente/Documents/GMC-Token/programs/gmc_token_native/src/vesting.rs; then
    log_test "Fun√ß√£o de Claim" "PASS" "Fun√ß√£o de reivindica√ß√£o encontrada"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    log_test "Fun√ß√£o de Claim" "FAIL" "Fun√ß√£o de reivindica√ß√£o n√£o encontrada"
    FAILED_TESTS=$((FAILED_TESTS + 1))
fi

echo
echo -e "${BLUE}üìÖ Teste 6: Estruturas de Dados${NC}"
echo "-------------------------------"

TOTAL_TESTS=$((TOTAL_TESTS + 1))
if grep -q "VestingSchedule\|VestingAccount\|vesting.*struct" /Users/cliente/Documents/GMC-Token/programs/gmc_token_native/src/vesting.rs; then
    log_test "Estrutura de Vesting" "PASS" "Estruturas de dados encontradas"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    log_test "Estrutura de Vesting" "FAIL" "Estruturas de dados n√£o encontradas"
    FAILED_TESTS=$((FAILED_TESTS + 1))
fi

TOTAL_TESTS=$((TOTAL_TESTS + 1))
if grep -q "start_time\|cliff_time\|end_time\|timestamp" /Users/cliente/Documents/GMC-Token/programs/gmc_token_native/src/vesting.rs; then
    log_test "Campos de Timestamp" "PASS" "Campos de tempo encontrados"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    log_test "Campos de Timestamp" "WARN" "Campos de tempo n√£o claramente identificados"
fi

echo
echo -e "${YELLOW}üìä RESUMO DOS TESTES DE VESTING${NC}"
echo "================================="
echo -e "${BLUE}Total de Testes: ${CYAN}$TOTAL_TESTS${NC}"
echo -e "${GREEN}Testes Aprovados: ${CYAN}$PASSED_TESTS${NC}"
echo -e "${RED}Testes Falharam: ${CYAN}$FAILED_TESTS${NC}"

# Calcular percentual de sucesso
if [ $TOTAL_TESTS -gt 0 ]; then
    SUCCESS_RATE=$((PASSED_TESTS * 100 / TOTAL_TESTS))
    echo -e "${BLUE}Taxa de Sucesso: ${CYAN}$SUCCESS_RATE%${NC}"
else
    SUCCESS_RATE=0
fi

echo
if [ $SUCCESS_RATE -ge 90 ]; then
    echo -e "${GREEN}üéâ ETAPA 2.6 APROVADA! Sistema de vesting validado.${NC}"
    echo -e "${GREEN}‚úÖ Cronogramas e prote√ß√µes anti-dump funcionais.${NC}"
    exit 0
elif [ $SUCCESS_RATE -ge 75 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è ETAPA 2.6 COM AVISOS. Alguns testes falharam.${NC}"
    echo -e "${YELLOW}üîç Revisar falhas antes de prosseguir.${NC}"
    exit 1
else
    echo -e "${RED}‚ùå ETAPA 2.6 REPROVADA! Muitos testes falharam.${NC}"
    echo -e "${RED}üö® Sistema de vesting precisa de corre√ß√µes.${NC}"
    exit 2
fi
