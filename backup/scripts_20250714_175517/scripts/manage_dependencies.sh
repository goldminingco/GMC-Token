#!/bin/bash

# üîß Script de Gerenciamento de Depend√™ncias - Projetos Solana
# Implementa as melhores pr√°ticas para evitar conflitos

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

echo "üîß Gerenciador de Depend√™ncias - Projetos Solana"
echo "=============================================="

# 1. Verificar duplicatas
echo ""
log_info "1. Analisando depend√™ncias duplicadas..."
DUPLICATES=$(cargo tree --duplicates 2>/dev/null | wc -l)
if [ "$DUPLICATES" -gt 0 ]; then
    log_warning "Encontradas $DUPLICATES depend√™ncias duplicadas"
    echo "Executando an√°lise detalhada:"
    cargo tree --duplicates | head -20
else
    log_success "Nenhuma depend√™ncia duplicada encontrada"
fi

# 2. Verificar depend√™ncias n√£o utilizadas
echo ""
log_info "2. Verificando depend√™ncias n√£o utilizadas..."
if command -v cargo-machete &> /dev/null; then
    cargo machete
else
    log_warning "cargo-machete n√£o instalado. Para instalar:"
    echo "cargo install cargo-machete"
fi

# 3. Verificar vulnerabilidades
echo ""
log_info "3. Verificando vulnerabilidades conhecidas..."
if cargo audit --version &> /dev/null; then
    cargo audit
else
    log_warning "cargo-audit n√£o instalado. Para instalar:"
    echo "cargo install cargo-audit"
fi

# 4. Verificar atualiza√ß√µes dispon√≠veis
echo ""
log_info "4. Verificando atualiza√ß√µes dispon√≠veis..."
if command -v cargo-outdated &> /dev/null; then
    cargo outdated
else
    log_warning "cargo-outdated n√£o instalado. Para instalar:"
    echo "cargo install cargo-outdated"
fi

# 5. An√°lise espec√≠fica para Anchor/Solana
echo ""
log_info "5. Verifica√ß√£o espec√≠fica Anchor/Solana..."

# Verificar vers√µes cr√≠ticas
ANCHOR_VERSION=$(cargo tree | grep "anchor-lang" | head -1 | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+" | head -1)
PROC_MACRO_VERSION=$(cargo tree | grep "proc-macro2" | head -1 | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+" | head -1)

log_info "Anchor Lang: $ANCHOR_VERSION"
log_info "Proc-macro2: $PROC_MACRO_VERSION"

# Verificar compatibilidade conhecida
if [[ "$PROC_MACRO_VERSION" == "v1.0.95" ]] && [[ "$ANCHOR_VERSION" == "v0.30.1" ]]; then
    log_warning "Incompatibilidade conhecida detectada!"
    echo "Solu√ß√£o: Use 'anchor build --no-idl' ou atualize Anchor"
fi

# 6. Gerar relat√≥rio
echo ""
log_info "6. Gerando relat√≥rio de depend√™ncias..."
REPORT_FILE="dependency_report_$(date +%Y%m%d_%H%M%S).txt"

{
    echo "# Relat√≥rio de Depend√™ncias - $(date)"
    echo "=================================="
    echo ""
    echo "## √Årvore de Depend√™ncias"
    cargo tree
    echo ""
    echo "## Depend√™ncias Duplicadas"
    cargo tree --duplicates
    echo ""
    echo "## Vers√µes Instaladas"
    echo "Rust: $(rustc --version)"
    echo "Cargo: $(cargo --version)"
    if command -v anchor &> /dev/null; then
        echo "Anchor: $(anchor --version)"
    fi
} > "$REPORT_FILE"

log_success "Relat√≥rio salvo em: $REPORT_FILE"

# 7. Sugest√µes de otimiza√ß√£o
echo ""
log_info "7. Sugest√µes de otimiza√ß√£o:"
echo "   ‚Ä¢ Usar vers√µes exatas (=x.y.z) para deps cr√≠ticas"
echo "   ‚Ä¢ Implementar CI/CD com verifica√ß√£o de deps"
echo "   ‚Ä¢ Monitorar releases do Anchor Framework"
echo "   ‚Ä¢ Executar este script semanalmente"

# 8. A√ß√µes autom√°ticas (opcional)
echo ""
read -p "üîß Deseja executar limpeza autom√°tica? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_info "Executando limpeza..."
    cargo clean
    log_success "Limpeza conclu√≠da"
fi

echo ""
log_success "An√°lise de depend√™ncias conclu√≠da!"
echo "üìä Para mais detalhes, consulte: $REPORT_FILE" 