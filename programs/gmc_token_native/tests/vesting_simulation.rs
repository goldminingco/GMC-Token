//! üß™ Teste de Simula√ß√£o Modular: Vesting System
//!
//! Este teste valida as regras de neg√≥cio do m√≥dulo de Vesting
//! em um cen√°rio de simula√ß√£o controlado, cobrindo:
//! - Cronogramas de vesting (linear e custom)
//! - Cliff periods
//! - Libera√ß√£o gradual de tokens
//! - Revoga√ß√£o e pausas

use solana_program_test::*;
use solana_sdk::{
    pubkey::Pubkey,
    signature::Keypair,
};
use gmc_token_native::{
    VestingSchedule,
    MIN_CLIFF_DURATION,
    MAX_VESTING_DURATION,
    MIN_VESTING_AMOUNT,
    process_instruction,
};

// Mock de contexto para os testes
async fn setup_test_environment() -> (BanksClient, Keypair, Pubkey) {
    let program_id = Pubkey::new_unique();
    let (banks_client, payer, _recent_blockhash) = ProgramTest::new(
        "gmc_token_native",
        program_id,
        processor!(process_instruction),
    )
    .start()
    .await;
    
    (banks_client, payer, program_id)
}

#[tokio::test]
async fn test_vesting_full_lifecycle_simulation() {
    let (_banks_client, _payer, _program_id) = setup_test_environment().await;

    println!("üß™ Iniciando Simula√ß√£o Modular: Sistema de Vesting");

    // üéØ Cen√°rio 1: Valida√ß√£o dos Par√¢metros de Vesting
    println!("üß™ Cen√°rio 1: Valida√ß√£o dos Par√¢metros de Vesting...");
    
    // Validar configura√ß√µes b√°sicas
    let cliff_duration_months = MIN_CLIFF_DURATION / (30 * 24 * 3600); // Converter segundos para meses (~30 dias)
    let vesting_duration_months = MAX_VESTING_DURATION / (30 * 24 * 3600); // Converter segundos para meses (~30 dias)
    assert!(MIN_CLIFF_DURATION > 0, "Cliff m√≠nimo deve ser maior que zero");
    assert!(MAX_VESTING_DURATION > MIN_CLIFF_DURATION, "Vesting deve ser maior que cliff");
    assert!(MIN_VESTING_AMOUNT > 0, "Valor m√≠nimo deve ser maior que zero");
    
    println!("   ‚Ä¢ Per√≠odo de cliff m√≠nimo: {} segundos (~{} meses)", MIN_CLIFF_DURATION, cliff_duration_months);
    println!("   ‚Ä¢ Dura√ß√£o m√°xima do vesting: {} segundos (~{} meses)", MAX_VESTING_DURATION, vesting_duration_months);
    println!("   ‚Ä¢ Valor m√≠nimo: {} GMC", MIN_VESTING_AMOUNT / 1_000_000_000);
    
    // üéØ Cen√°rio 2: Simula√ß√£o de Cronograma Linear
    println!("üß™ Cen√°rio 2: Simula√ß√£o de Cronograma Linear...");
    
    let total_amount = 120_000_000_000u64; // 120,000 GMC
    let start_timestamp = 1000000u64; // Timestamp fict√≠cio
    let cliff_timestamp = start_timestamp + MIN_CLIFF_DURATION as u64; // Usar cliff m√≠nimo
    let end_timestamp = start_timestamp + (24 * 30 * 24 * 3600); // 24 meses (exemplo)
    
    println!("   ‚Ä¢ Total a ser liberado: {} GMC", total_amount / 1_000_000_000);
    println!("   ‚Ä¢ In√≠cio: timestamp {}", start_timestamp);
    println!("   ‚Ä¢ Cliff: timestamp {} (cliff m√≠nimo)", cliff_timestamp);
    println!("   ‚Ä¢ Fim: timestamp {} (24 meses)", end_timestamp);
    
    // Simular vesting schedule
    let vesting_schedule = VestingSchedule {
        beneficiary: Pubkey::new_unique(),
        created_by: Pubkey::new_unique(),
        total_amount,
        released_amount: 0,
        id: 1,
        start_timestamp: start_timestamp as u32,
        cliff_timestamp: cliff_timestamp as u32,
        end_timestamp: end_timestamp as u32,
        last_release_timestamp: start_timestamp as u32,
        release_interval: 86400, // 1 dia em segundos
        vesting_type: gmc_token_native::VestingType::Linear,
        status: gmc_token_native::VestingStatus::Active,
        emergency_releasable: false,
        _padding: 0,
    };
    
    println!("   ‚Ä¢ Cronograma criado com sucesso");

    // üéØ Cen√°rio 3: Valida√ß√£o do Per√≠odo de Cliff
    println!("üß™ Cen√°rio 3: Valida√ß√£o do Per√≠odo de Cliff...");
    
    // Simular diferentes momentos no tempo
    let before_cliff = cliff_timestamp - 86400; // 1 dia antes do cliff
    let exactly_cliff = cliff_timestamp;
    let after_cliff = cliff_timestamp + 86400; // 1 dia depois do cliff
    
    // Antes do cliff: 0% liberado
    let vested_before_cliff = calculate_vested_amount(
        &vesting_schedule, 
        before_cliff as i64
    );
    assert_eq!(vested_before_cliff, 0, "Nada deve ser liberado antes do cliff");
    
    println!("   ‚Ä¢ Antes do cliff: {} GMC liberados ‚úÖ", vested_before_cliff / 1_000_000_000);
    
    // Exatamente no cliff: ainda 0% (cliff √© exclusivo)
    let vested_at_cliff = calculate_vested_amount(
        &vesting_schedule, 
        exactly_cliff as i64
    );
    println!("   ‚Ä¢ No cliff: {} GMC liberados", vested_at_cliff / 1_000_000_000);
    
    // Depois do cliff: vesting linear come√ßa
    let vested_after_cliff = calculate_vested_amount(
        &vesting_schedule, 
        after_cliff as i64
    );
    assert!(vested_after_cliff > 0, "Algo deve ser liberado ap√≥s o cliff");
    
    println!("   ‚Ä¢ Ap√≥s o cliff: {} GMC liberados ‚úÖ", vested_after_cliff / 1_000_000_000);

    // üéØ Cen√°rio 4: Simula√ß√£o de Libera√ß√£o Linear
    println!("üß™ Cen√°rio 4: Simula√ß√£o de Libera√ß√£o Linear...");
    
    // Simular marcos no cronograma (ap√≥s o cliff)
    let milestones = [
        ("25% do per√≠odo", cliff_timestamp + ((end_timestamp - cliff_timestamp) / 4)),
        ("50% do per√≠odo", cliff_timestamp + ((end_timestamp - cliff_timestamp) / 2)),
        ("75% do per√≠odo", cliff_timestamp + (3 * (end_timestamp - cliff_timestamp) / 4)),
        ("100% do per√≠odo", end_timestamp),
    ];
    
    for (milestone_name, timestamp) in &milestones {
        let vested_amount = calculate_vested_amount(&vesting_schedule, *timestamp as i64);
        let percentage = (vested_amount * 100) / total_amount;
        
        println!("   ‚Ä¢ {}: {} GMC ({}%)", 
                 milestone_name, 
                 vested_amount / 1_000_000_000, 
                 percentage);
        
        // Validar que o valor est√° dentro do esperado
        assert!(vested_amount <= total_amount, "Valor liberado n√£o deve exceder o total");
    }
    
    // Validar que 100% √© liberado no final
    let final_vested = calculate_vested_amount(&vesting_schedule, end_timestamp as i64);
    assert_eq!(final_vested, total_amount, "100% deve ser liberado no final");

    // üéØ Cen√°rio 5: Simula√ß√£o de Claim de Tokens
    println!("üß™ Cen√°rio 5: Simula√ß√£o de Claim de Tokens...");
    
    let mut mock_schedule = vesting_schedule.clone();
    let current_time = cliff_timestamp + ((end_timestamp - cliff_timestamp) / 2); // 50% do per√≠odo
    let available_to_claim = calculate_vested_amount(&mock_schedule, current_time as i64);
    
    // Simular claim
    let claim_amount = available_to_claim;
    mock_schedule.released_amount += claim_amount;
    
    println!("   ‚Ä¢ Dispon√≠vel para claim: {} GMC", available_to_claim / 1_000_000_000);
    println!("   ‚Ä¢ Valor do claim: {} GMC", claim_amount / 1_000_000_000);
    println!("   ‚Ä¢ Total j√° liberado: {} GMC", mock_schedule.released_amount / 1_000_000_000);
    
    // Validar que o pr√≥ximo claim considera o que j√° foi liberado
    let next_available = calculate_vested_amount(&mock_schedule, current_time as i64) 
        - mock_schedule.released_amount;
    assert_eq!(next_available, 0, "Nada mais deve estar dispon√≠vel imediatamente ap√≥s o claim");
    
    println!("   ‚Ä¢ Pr√≥ximo claim dispon√≠vel: {} GMC ‚úÖ", next_available / 1_000_000_000);

    // üéØ Cen√°rio 6: Simula√ß√£o de Revoga√ß√£o
    println!("üß™ Cen√°rio 6: Simula√ß√£o de Revoga√ß√£o...");
    
    let mut revocable_schedule = vesting_schedule.clone();
    let revoke_time = cliff_timestamp + ((end_timestamp - cliff_timestamp) / 3); // 33% do per√≠odo
    
    // Calcular valor liberado at√© o momento da revoga√ß√£o
    let vested_at_revoke = calculate_vested_amount(&revocable_schedule, revoke_time as i64);
    
    // Simular revoga√ß√£o
    revocable_schedule.status = gmc_token_native::VestingStatus::Cancelled;
    
    println!("   ‚Ä¢ Momento da revoga√ß√£o: 33% do per√≠odo");
    println!("   ‚Ä¢ Valor j√° liberado: {} GMC", vested_at_revoke / 1_000_000_000);
    println!("   ‚Ä¢ Valor n√£o liberado: {} GMC", 
             (total_amount - vested_at_revoke) / 1_000_000_000);
    
    // Ap√≥s revoga√ß√£o, nada mais deve ser liberado
    let after_revoke = end_timestamp - 86400; // Pr√≥ximo ao fim
    let vested_after_revoke = if revocable_schedule.status == gmc_token_native::VestingStatus::Cancelled {
        vested_at_revoke // Fica fixo no valor da revoga√ß√£o
    } else {
        calculate_vested_amount(&revocable_schedule, after_revoke as i64)
    };
    
    assert_eq!(vested_after_revoke, vested_at_revoke, 
               "Ap√≥s revoga√ß√£o, valor liberado deve permanecer fixo");
    
    println!("   ‚Ä¢ Status ap√≥s revoga√ß√£o: FIXADO ‚úÖ");

    // üéØ Cen√°rio 7: M√∫ltiplos Benefici√°rios
    println!("üß™ Cen√°rio 7: M√∫ltiplos Benefici√°rios...");
    
    let beneficiaries = [
        ("Team Lead", 50_000_000_000u64),      // 50,000 GMC
        ("Developer", 30_000_000_000u64),      // 30,000 GMC
        ("Marketing", 20_000_000_000u64),      // 20,000 GMC
        ("Advisor", 10_000_000_000u64),        // 10,000 GMC
    ];
    
    let mut total_vesting = 0u64;
    
    for (role, amount) in &beneficiaries {
        total_vesting += amount;
        println!("   ‚Ä¢ {}: {} GMC", role, amount / 1_000_000_000);
        
        // Validar valor m√≠nimo
        assert!(amount >= &MIN_VESTING_AMOUNT, 
                "Cada vesting deve atender ao valor m√≠nimo");
    }
    
    println!("   ‚Ä¢ Total em vesting: {} GMC", total_vesting / 1_000_000_000);
    println!("   ‚Ä¢ N√∫mero de benefici√°rios: {}", beneficiaries.len());

    println!("‚úÖ Simula√ß√£o de Vesting conclu√≠da com sucesso!");
    assert!(true, "Todas as valida√ß√µes do sistema de vesting passaram");
}

// Fun√ß√£o auxiliar para calcular o valor liberado (mock da l√≥gica de vesting)
fn calculate_vested_amount(schedule: &VestingSchedule, current_time: i64) -> u64 {
    if schedule.status == gmc_token_native::VestingStatus::Cancelled {
        return schedule.released_amount;
    }
    
    if current_time < schedule.cliff_timestamp as i64 {
        return 0;
    }
    
    if current_time >= schedule.end_timestamp as i64 {
        return schedule.total_amount;
    }
    
    // Vesting linear ap√≥s o cliff
    let vesting_duration = schedule.end_timestamp as i64 - schedule.cliff_timestamp as i64;
    let elapsed_since_cliff = current_time - schedule.cliff_timestamp as i64;
    
    (schedule.total_amount * elapsed_since_cliff as u64) / vesting_duration as u64
}

#[tokio::test]
async fn test_vesting_edge_cases() {
    println!("üß™ Teste: Casos Extremos do Sistema de Vesting");
    
    // üéØ Caso 1: Vesting com valor m√≠nimo
    println!("üß™ Caso 1: Vesting com valor m√≠nimo...");
    let min_schedule = VestingSchedule {
        beneficiary: Pubkey::new_unique(),
        created_by: Pubkey::new_unique(),
        total_amount: MIN_VESTING_AMOUNT,
        released_amount: 0,
        id: 1,
        start_timestamp: 1000000,
        cliff_timestamp: 1000000 + MIN_CLIFF_DURATION,
        end_timestamp: 1000000 + (24 * 30 * 24 * 3600),  // 24 meses
        last_release_timestamp: 1000000,
        release_interval: 86400,
        vesting_type: gmc_token_native::VestingType::Linear,
        status: gmc_token_native::VestingStatus::Active,
        emergency_releasable: false,
        _padding: 0,
    };
    
    assert_eq!(min_schedule.total_amount, MIN_VESTING_AMOUNT, 
               "Deve aceitar valor m√≠nimo");
    
    // üéØ Caso 2: Timestamps no limite
    println!("üß™ Caso 2: Timestamps no limite...");
    let edge_time = min_schedule.cliff_timestamp as i64;
    let vested_at_edge = calculate_vested_amount(&min_schedule, edge_time);
    
    // No cliff exato, ainda deve ser 0 (cliff √© exclusivo)
    assert_eq!(vested_at_edge, 0, "No momento exato do cliff deve ser 0");
    
    // 1 m√™s ap√≥s o cliff (para ter uma quantidade significativa liberada)
    let vested_after_cliff = calculate_vested_amount(&min_schedule, edge_time + (30 * 24 * 3600));
    assert!(vested_after_cliff > 0, "Ap√≥s o cliff deve ter algo liberado");
    
    // üéØ Caso 3: Overflow protection
    println!("üß™ Caso 3: Prote√ß√£o contra overflow...");
    let max_amount = u64::MAX / 100; // Valor seguro para c√°lculos
    let max_schedule = VestingSchedule {
        beneficiary: Pubkey::new_unique(),
        created_by: Pubkey::new_unique(),
        total_amount: max_amount,
        released_amount: 0,
        id: 1,
        start_timestamp: 1000000,
        cliff_timestamp: 1000000 + 1000,
        end_timestamp: 1000000 + 2000,
        last_release_timestamp: 1000000,
        release_interval: 86400,
        vesting_type: gmc_token_native::VestingType::Linear,
        status: gmc_token_native::VestingStatus::Active,
        emergency_releasable: false,
        _padding: 0,
    };
    
    let vested_max = calculate_vested_amount(&max_schedule, max_schedule.end_timestamp as i64);
    assert_eq!(vested_max, max_amount, "Deve lidar com valores grandes");
    
    println!("‚úÖ Todos os casos extremos do vesting validados");
}

#[tokio::test]
async fn test_vesting_precision() {
    println!("üß™ Teste: Precis√£o dos C√°lculos de Vesting");
    
    let schedule = VestingSchedule {
        beneficiary: Pubkey::new_unique(),
        created_by: Pubkey::new_unique(),
        total_amount: 1_000_000_000_000u64, // 1,000,000 GMC
        released_amount: 0,
        id: 1,
        start_timestamp: 0,
        cliff_timestamp: 1000,
        end_timestamp: 10000, // 9000 segundos de vesting
        last_release_timestamp: 0,
        release_interval: 86400,
        vesting_type: gmc_token_native::VestingType::Linear,
        status: gmc_token_native::VestingStatus::Active,
        emergency_releasable: false,
        _padding: 0,
    };
    
    // Testar precis√£o em diferentes pontos
    let test_points = [
        (1001, "Logo ap√≥s cliff"),
        (2500, "25% do per√≠odo"),
        (5500, "50% do per√≠odo"),
        (8250, "75% do per√≠odo"),
        (9999, "Quase no fim"),
        (10000, "Exatamente no fim"),
    ];
    
    for (timestamp, description) in &test_points {
        let vested = calculate_vested_amount(&schedule, *timestamp);
        let percentage = (vested * 100) / schedule.total_amount;
        
        println!("   ‚Ä¢ {}: {} GMC ({}%)", 
                 description, 
                 vested / 1_000_000_000, 
                 percentage);
        
        // Valida√ß√µes de sanidade
        assert!(vested <= schedule.total_amount, "N√£o deve exceder o total");
        
        if *timestamp >= schedule.end_timestamp as i64 {
            assert_eq!(vested, schedule.total_amount, "No fim deve ser 100%");
        }
    }
    
    println!("‚úÖ Precis√£o dos c√°lculos validada");
} 